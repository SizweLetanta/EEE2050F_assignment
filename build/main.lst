ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.delay,"ax",%progbits
  19              		.align	1
  20              		.global	delay
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	delay:
  26              	.LVL0:
  27              	.LFB48:
  28              		.file 2 "Core/Inc/lcd_stm32f0.c"
   1:Core/Inc/lcd_stm32f0.c **** //********************************************************************
   2:Core/Inc/lcd_stm32f0.c **** //*                      EEE2046F STM32F0                            *
   3:Core/Inc/lcd_stm32f0.c **** //*                         LCD MODULE                               *
   4:Core/Inc/lcd_stm32f0.c **** //*==================================================================*
   5:Core/Inc/lcd_stm32f0.c **** //* WRITTEN BY:    Copyright (C) Samuel Ginsberg 2004                *
   6:Core/Inc/lcd_stm32f0.c **** //* PORTED TO STM32F0 dev board by James Gowans, 2014                *
   7:Core/Inc/lcd_stm32f0.c **** //* MODIFIED BY:   Robyn Verrinder                                   *
   8:Core/Inc/lcd_stm32f0.c **** //* DATE CREATED:  2004                                              *
   9:Core/Inc/lcd_stm32f0.c **** //* PORTED:	   2014						     *
  10:Core/Inc/lcd_stm32f0.c **** //* MODIFIED:      03-08-2015                                        *
  11:Core/Inc/lcd_stm32f0.c **** //*==================================================================*
  12:Core/Inc/lcd_stm32f0.c **** //* PROGRAMMED IN: ECLIPSE IDE Luna Service Release 1 (4.4.1)        *
  13:Core/Inc/lcd_stm32f0.c **** //* DEV. BOARD:    UCT STM32 Development Board                       *
  14:Core/Inc/lcd_stm32f0.c **** //* TARGET:	   STMicroelectronics STM32F051C6                    *
  15:Core/Inc/lcd_stm32f0.c **** //*==================================================================*
  16:Core/Inc/lcd_stm32f0.c **** //* DESCRIPTION:   This code contains common functions to communicate*
  17:Core/Inc/lcd_stm32f0.c **** //*                with the LCD module connected to the STM32 uC.    *
  18:Core/Inc/lcd_stm32f0.c **** //*==================================================================*
  19:Core/Inc/lcd_stm32f0.c **** //* LCD SETUP:     - 4 bit mode      (Upper 4 data lines D4-D7 used) *
  20:Core/Inc/lcd_stm32f0.c **** //*                - Two lines used                                  *
  21:Core/Inc/lcd_stm32f0.c **** //*                - Flashing cursor                                 *
  22:Core/Inc/lcd_stm32f0.c **** //*==================================================================*
  23:Core/Inc/lcd_stm32f0.c **** //* CONNECTIONS:                                                     *
  24:Core/Inc/lcd_stm32f0.c **** //*------------------------------------------------------------------*
  25:Core/Inc/lcd_stm32f0.c **** //* LCD PINS   | NAME                    | CONNECTED TO              *
  26:Core/Inc/lcd_stm32f0.c **** //*------------------------------------------------------------------*
  27:Core/Inc/lcd_stm32f0.c **** //* 1............VSS.......................GND                       *
  28:Core/Inc/lcd_stm32f0.c **** //* 2............VDD.......................+5V                       *
  29:Core/Inc/lcd_stm32f0.c **** //* 3............CONTRAST..................POT 2                     *
  30:Core/Inc/lcd_stm32f0.c **** //* 4............RS  - Register Select.....PC14 (LCD_RS)             *
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 2


  31:Core/Inc/lcd_stm32f0.c **** //* 5............RW  - Read/Write..........GND                       *
  32:Core/Inc/lcd_stm32f0.c **** //* 6............E   - Enable..............PC15 (LCD_E)              *
  33:Core/Inc/lcd_stm32f0.c **** //* 7............D0  - Data line 0.........GND                       *
  34:Core/Inc/lcd_stm32f0.c **** //* 8............D1  - Data line 1.........GND                       *
  35:Core/Inc/lcd_stm32f0.c **** //* 9............D2  - Data line 2.........GND                       *
  36:Core/Inc/lcd_stm32f0.c **** //* 10...........D3  - Data line 3.........GND                       *
  37:Core/Inc/lcd_stm32f0.c **** //* 11...........D4  - Data line 4.........PB8  (LCD_D4)             *
  38:Core/Inc/lcd_stm32f0.c **** //* 12...........D5  - Data line 5.........PB9  (LCD_D5)             *
  39:Core/Inc/lcd_stm32f0.c **** //* 13...........D6  - Data line 6.........PA12 (LCD_D6)             *
  40:Core/Inc/lcd_stm32f0.c **** //* 14...........D7  - Data line 7.........PA15 (LCD_D7)             *
  41:Core/Inc/lcd_stm32f0.c **** //* 15...........CATHLED...................NC                        *
  42:Core/Inc/lcd_stm32f0.c **** //* 16...........ANODELED..................NC                        *
  43:Core/Inc/lcd_stm32f0.c **** //********************************************************************
  44:Core/Inc/lcd_stm32f0.c **** // INCLUDE FILES
  45:Core/Inc/lcd_stm32f0.c **** //====================================================================
  46:Core/Inc/lcd_stm32f0.c **** #include "lcd_stm32f0.h"
  47:Core/Inc/lcd_stm32f0.c **** #include "stm32f0xx.h"
  48:Core/Inc/lcd_stm32f0.c **** //====================================================================
  49:Core/Inc/lcd_stm32f0.c **** // SEND COMMAND CODE TO LCD - LCD_Command(command)
  50:Core/Inc/lcd_stm32f0.c **** //====================================================================
  51:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: This function sends a command to the LCD. Care is taken
  52:Core/Inc/lcd_stm32f0.c **** //              not to interfere with the other lines on the port.
  53:Core/Inc/lcd_stm32f0.c **** //
  54:Core/Inc/lcd_stm32f0.c **** //              As we are using a microcontroller to control the LCD
  55:Core/Inc/lcd_stm32f0.c **** //              we use 4-bit mode to save on number of lines used to
  56:Core/Inc/lcd_stm32f0.c **** //              connect to the LCD. This means that an 8-bit command
  57:Core/Inc/lcd_stm32f0.c **** //              must be split into two sets of 4-bits (upper and lower)
  58:Core/Inc/lcd_stm32f0.c **** //              These sets must be transmitted
  59:Core/Inc/lcd_stm32f0.c **** //====================================================================
  60:Core/Inc/lcd_stm32f0.c **** // USEFUL COMMANDS:
  61:Core/Inc/lcd_stm32f0.c **** //                  - POWER_UP:      Power up initialization for the lcd
  62:Core/Inc/lcd_stm32f0.c **** //                  - FOURBIT_MODE:  Sets LCD for 4-bit mode
  63:Core/Inc/lcd_stm32f0.c **** //                  - TWOLINE_MODE:  Sets up 2 lines and character size
  64:Core/Inc/lcd_stm32f0.c **** //                  - SETUP_CURSOR:  Turn display on and set up cursor
  65:Core/Inc/lcd_stm32f0.c **** //                  - CLEAR:         Clear screen
  66:Core/Inc/lcd_stm32f0.c **** //                  - CURSOR_HOME:   Cursor home
  67:Core/Inc/lcd_stm32f0.c **** //                  - LINE_TWO:      Line 2
  68:Core/Inc/lcd_stm32f0.c **** //
  69:Core/Inc/lcd_stm32f0.c **** //====================================================================
  70:Core/Inc/lcd_stm32f0.c **** 
  71:Core/Inc/lcd_stm32f0.c **** void lcd_command(unsigned char command)
  72:Core/Inc/lcd_stm32f0.c **** {
  73:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_RS_RESET;	// Register Select (RS)line low (data sent will now be read as com
  74:Core/Inc/lcd_stm32f0.c **** 
  75:Core/Inc/lcd_stm32f0.c **** // Put upper nibble (upper 4-bits) on data lines, command mode
  76:Core/Inc/lcd_stm32f0.c **** // DATALINE 7
  77:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x80) != 0)		// Select bit 7 of command, if HIGH set Data line 7 (D7) 
  78:Core/Inc/lcd_stm32f0.c ****     {
  79:Core/Inc/lcd_stm32f0.c ****     	GPIOA->BSRR |= LCD_D7_SET;
  80:Core/Inc/lcd_stm32f0.c ****     }
  81:Core/Inc/lcd_stm32f0.c ****     else				// else RESET D7
  82:Core/Inc/lcd_stm32f0.c ****     {
  83:Core/Inc/lcd_stm32f0.c ****     	GPIOA->BSRR |= LCD_D7_RESET;
  84:Core/Inc/lcd_stm32f0.c ****     }
  85:Core/Inc/lcd_stm32f0.c **** // DATALINE 6
  86:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x40) != 0)		// Select bit 6 of command, if HIGH set Data line 6 (D6) 
  87:Core/Inc/lcd_stm32f0.c ****     {
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 3


  88:Core/Inc/lcd_stm32f0.c ****         GPIOA->BSRR |= LCD_D6_SET;
  89:Core/Inc/lcd_stm32f0.c ****     }
  90:Core/Inc/lcd_stm32f0.c ****     else				// else RESET D6
  91:Core/Inc/lcd_stm32f0.c ****     {
  92:Core/Inc/lcd_stm32f0.c ****         GPIOA->BSRR |= LCD_D6_RESET;
  93:Core/Inc/lcd_stm32f0.c ****     }
  94:Core/Inc/lcd_stm32f0.c **** // DATALINE 5
  95:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x20) != 0)		// Select bit 5 of command, if HIGH set Data line 5 (D5)
  96:Core/Inc/lcd_stm32f0.c ****     {
  97:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D5_SET;	
  98:Core/Inc/lcd_stm32f0.c ****     }
  99:Core/Inc/lcd_stm32f0.c ****     else				// else RESET D5
 100:Core/Inc/lcd_stm32f0.c ****     {
 101:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D5_RESET;
 102:Core/Inc/lcd_stm32f0.c ****     }
 103:Core/Inc/lcd_stm32f0.c **** // DATALINE 4
 104:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x10) != 0)		// Select bit 4 of command, if HIGH set Data line 4 (D4)
 105:Core/Inc/lcd_stm32f0.c ****     {
 106:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D4_SET;
 107:Core/Inc/lcd_stm32f0.c ****     }
 108:Core/Inc/lcd_stm32f0.c ****     else				//  else RESET D4
 109:Core/Inc/lcd_stm32f0.c ****     {
 110:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D4_RESET;
 111:Core/Inc/lcd_stm32f0.c ****     }
 112:Core/Inc/lcd_stm32f0.c **** 
 113:Core/Inc/lcd_stm32f0.c ****     pulse_strobe ();			// Send data
 114:Core/Inc/lcd_stm32f0.c **** 
 115:Core/Inc/lcd_stm32f0.c **** // lower nibble to data lines
 116:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x08) != 0)		// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 117:Core/Inc/lcd_stm32f0.c ****     {
 118:Core/Inc/lcd_stm32f0.c ****     	GPIOA->BSRR |= LCD_D7_SET;
 119:Core/Inc/lcd_stm32f0.c ****     }
 120:Core/Inc/lcd_stm32f0.c ****     else				// else RESET D7
 121:Core/Inc/lcd_stm32f0.c ****     {
 122:Core/Inc/lcd_stm32f0.c ****     	GPIOA->BSRR |= LCD_D7_RESET;
 123:Core/Inc/lcd_stm32f0.c ****     }
 124:Core/Inc/lcd_stm32f0.c **** // DATALINE 6
 125:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x04) != 0)		// Select bit 2 of command, if HIGH set Data line 6 (D6)
 126:Core/Inc/lcd_stm32f0.c ****     {
 127:Core/Inc/lcd_stm32f0.c ****         GPIOA->BSRR |= LCD_D6_SET;
 128:Core/Inc/lcd_stm32f0.c ****     }
 129:Core/Inc/lcd_stm32f0.c ****     else				//  else RESET D6
 130:Core/Inc/lcd_stm32f0.c ****     {
 131:Core/Inc/lcd_stm32f0.c ****         GPIOA->BSRR |= LCD_D6_RESET;
 132:Core/Inc/lcd_stm32f0.c ****     }
 133:Core/Inc/lcd_stm32f0.c ****     // DATALINE 5
 134:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x02) != 0)		// Select bit 1 of command, if HIGH set Data line 5 (D5)
 135:Core/Inc/lcd_stm32f0.c ****     {
 136:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D5_SET;         
 137:Core/Inc/lcd_stm32f0.c ****     }
 138:Core/Inc/lcd_stm32f0.c ****     else				//  else RESET D5
 139:Core/Inc/lcd_stm32f0.c ****     {
 140:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D5_RESET;
 141:Core/Inc/lcd_stm32f0.c ****     }
 142:Core/Inc/lcd_stm32f0.c ****     // DATALINE 4
 143:Core/Inc/lcd_stm32f0.c ****     if ((command & 0x01) != 0)		// Select bit 0 of command, if HIGH set Data line 4 (D4)
 144:Core/Inc/lcd_stm32f0.c ****     {
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 4


 145:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D4_SET;
 146:Core/Inc/lcd_stm32f0.c ****     }
 147:Core/Inc/lcd_stm32f0.c ****     else				//  else RESET D4
 148:Core/Inc/lcd_stm32f0.c ****     {
 149:Core/Inc/lcd_stm32f0.c ****     	GPIOB->BSRR |= LCD_D4_RESET;
 150:Core/Inc/lcd_stm32f0.c ****     }
 151:Core/Inc/lcd_stm32f0.c **** 
 152:Core/Inc/lcd_stm32f0.c ****     pulse_strobe();			// Send data
 153:Core/Inc/lcd_stm32f0.c ****     delay(3000);
 154:Core/Inc/lcd_stm32f0.c **** }
 155:Core/Inc/lcd_stm32f0.c **** 
 156:Core/Inc/lcd_stm32f0.c **** //====================================================================
 157:Core/Inc/lcd_stm32f0.c **** // INITIALISE LCD - LCD_Init()
 158:Core/Inc/lcd_stm32f0.c **** //====================================================================
 159:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: This function sets up the port lines for the LCD and
 160:Core/Inc/lcd_stm32f0.c **** //              intialises the module for use.
 161:Core/Inc/lcd_stm32f0.c **** //====================================================================
 162:Core/Inc/lcd_stm32f0.c **** // LCD SETUP:     - 4 bit mode      (Upper 4 data lines D4-D7 used)
 163:Core/Inc/lcd_stm32f0.c **** //                - Two lines used
 164:Core/Inc/lcd_stm32f0.c **** //                - Flashing cursor
 165:Core/Inc/lcd_stm32f0.c **** //====================================================================
 166:Core/Inc/lcd_stm32f0.c **** 
 167:Core/Inc/lcd_stm32f0.c **** void init_LCD(void)
 168:Core/Inc/lcd_stm32f0.c **** {
 169:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOAEN;	// Connect clocks to GPIO A, B and C
 170:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 171:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 172:Core/Inc/lcd_stm32f0.c **** 
 173:Core/Inc/lcd_stm32f0.c ****     GPIOA->MODER |= (GPIO_MODER_MODER12_0|GPIO_MODER_MODER15_0); // D6 and D7
 174:Core/Inc/lcd_stm32f0.c ****     GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 175:Core/Inc/lcd_stm32f0.c ****     GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 176:Core/Inc/lcd_stm32f0.c **** 
 177:Core/Inc/lcd_stm32f0.c ****     delay(30000);			// Allow the LCD some power up time (~30ms)
 178:Core/Inc/lcd_stm32f0.c **** 
 179:Core/Inc/lcd_stm32f0.c ****     lcd_command(POWER_UP);		// Power up initialization for the lcd
 180:Core/Inc/lcd_stm32f0.c ****     lcd_command(FOURBIT_MODE);		// Set LCD into 4 bit mode
 181:Core/Inc/lcd_stm32f0.c ****     lcd_command(DISPLAY_ON);		// Turn display on and set up cursor
 182:Core/Inc/lcd_stm32f0.c ****     lcd_command(TWOLINE_MODE);		// Set up 2 lines and character size
 183:Core/Inc/lcd_stm32f0.c ****     lcd_command(CLEAR);			// Clear display
 184:Core/Inc/lcd_stm32f0.c **** }
 185:Core/Inc/lcd_stm32f0.c **** 
 186:Core/Inc/lcd_stm32f0.c **** //====================================================================
 187:Core/Inc/lcd_stm32f0.c **** // WRITE A SINGLE CHARACTER TO THE LCD - LCD_PutChar(character)
 188:Core/Inc/lcd_stm32f0.c **** //====================================================================
 189:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: Puts a single character on the LCD at the next position
 190:Core/Inc/lcd_stm32f0.c **** //              on the screen. The character to be printed is in the input
 191:Core/Inc/lcd_stm32f0.c **** //              parameter. For numbers, letters and other common characters
 192:Core/Inc/lcd_stm32f0.c **** //              the ASCII code will produce correct display.
 193:Core/Inc/lcd_stm32f0.c **** //
 194:Core/Inc/lcd_stm32f0.c **** //              Refer to the Hitachi HD44780 datasheet for full character
 195:Core/Inc/lcd_stm32f0.c **** //              set information.
 196:Core/Inc/lcd_stm32f0.c **** //====================================================================
 197:Core/Inc/lcd_stm32f0.c **** 
 198:Core/Inc/lcd_stm32f0.c ****  void lcd_putchar(unsigned char character)
 199:Core/Inc/lcd_stm32f0.c **** {
 200:Core/Inc/lcd_stm32f0.c **** 	GPIOC->BSRR |= LCD_RS_SET;	// Register Select (RS) line HIGH (data sent will now be read as text);
 201:Core/Inc/lcd_stm32f0.c **** // Put upper nibble (upper 4-bits) on data lines, command mode
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 5


 202:Core/Inc/lcd_stm32f0.c **** // DATALINE 7
 203:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x80) != 0) 	// Select bit 7 of command, if HIGH set Data line 7 (D7)
 204:Core/Inc/lcd_stm32f0.c ****         {
 205:Core/Inc/lcd_stm32f0.c ****         	GPIOA->BSRR |= LCD_D7_SET;
 206:Core/Inc/lcd_stm32f0.c ****         }
 207:Core/Inc/lcd_stm32f0.c ****         else				//  else RESET D7
 208:Core/Inc/lcd_stm32f0.c ****         {
 209:Core/Inc/lcd_stm32f0.c ****         	GPIOA->BSRR |= LCD_D7_RESET;
 210:Core/Inc/lcd_stm32f0.c ****         }
 211:Core/Inc/lcd_stm32f0.c ****         // DATALINE 6
 212:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x40) != 0)	// Select bit 6 of command, if HIGH set Data line 6 (D6)      
 213:Core/Inc/lcd_stm32f0.c **** 	{
 214:Core/Inc/lcd_stm32f0.c ****             GPIOA->BSRR |= LCD_D6_SET;
 215:Core/Inc/lcd_stm32f0.c ****         }
 216:Core/Inc/lcd_stm32f0.c ****         else				//  else RESET D6
 217:Core/Inc/lcd_stm32f0.c **** 
 218:Core/Inc/lcd_stm32f0.c ****         {
 219:Core/Inc/lcd_stm32f0.c ****             GPIOA->BSRR |= LCD_D6_RESET;
 220:Core/Inc/lcd_stm32f0.c ****         }
 221:Core/Inc/lcd_stm32f0.c **** // DATALINE 5
 222:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x20) != 0)	// Select bit 5 of command, if HIGH set Data line 5 (D5)
 223:Core/Inc/lcd_stm32f0.c **** 
 224:Core/Inc/lcd_stm32f0.c ****         {
 225:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D5_SET;                 
 226:Core/Inc/lcd_stm32f0.c **** 	}
 227:Core/Inc/lcd_stm32f0.c ****         else				//  else RESET D5
 228:Core/Inc/lcd_stm32f0.c ****         {
 229:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D5_RESET;
 230:Core/Inc/lcd_stm32f0.c ****         }
 231:Core/Inc/lcd_stm32f0.c **** // DATALINE 4
 232:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x10) != 0)	// Select bit 4 of command, if HIGH set Data line 4 (D4) 
 233:Core/Inc/lcd_stm32f0.c ****         {
 234:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D4_SET;
 235:Core/Inc/lcd_stm32f0.c ****         }
 236:Core/Inc/lcd_stm32f0.c ****         else				// else RESET D4
 237:Core/Inc/lcd_stm32f0.c ****         {
 238:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D4_RESET;
 239:Core/Inc/lcd_stm32f0.c ****         }
 240:Core/Inc/lcd_stm32f0.c **** 
 241:Core/Inc/lcd_stm32f0.c ****         pulse_strobe ();		// Send data
 242:Core/Inc/lcd_stm32f0.c **** 
 243:Core/Inc/lcd_stm32f0.c **** // lower nibble to data lines
 244:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x08) != 0)	// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 245:Core/Inc/lcd_stm32f0.c ****         {
 246:Core/Inc/lcd_stm32f0.c ****         	GPIOA->BSRR |= LCD_D7_SET;
 247:Core/Inc/lcd_stm32f0.c ****         }
 248:Core/Inc/lcd_stm32f0.c ****         else				// else RESET D7
 249:Core/Inc/lcd_stm32f0.c ****         {
 250:Core/Inc/lcd_stm32f0.c ****         	GPIOA->BSRR |= LCD_D7_RESET;
 251:Core/Inc/lcd_stm32f0.c ****         }
 252:Core/Inc/lcd_stm32f0.c **** // DATALINE 6
 253:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x04) != 0)	// Select bit 2 of command, if HIGH set Data line 6 (D6)      
 254:Core/Inc/lcd_stm32f0.c **** 	{
 255:Core/Inc/lcd_stm32f0.c ****             GPIOA->BSRR |= LCD_D6_SET;
 256:Core/Inc/lcd_stm32f0.c ****         }
 257:Core/Inc/lcd_stm32f0.c ****         else				// else RESET D6
 258:Core/Inc/lcd_stm32f0.c **** 
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 6


 259:Core/Inc/lcd_stm32f0.c ****         {
 260:Core/Inc/lcd_stm32f0.c ****             GPIOA->BSRR |= LCD_D6_RESET;
 261:Core/Inc/lcd_stm32f0.c ****         }
 262:Core/Inc/lcd_stm32f0.c **** // DATALINE 5
 263:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x02) != 0)	// Select bit 1 of command, if HIGH set Data line 5 (D5)  
 264:Core/Inc/lcd_stm32f0.c ****         {
 265:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D5_SET;       
 266:Core/Inc/lcd_stm32f0.c **** 	}
 267:Core/Inc/lcd_stm32f0.c ****         else				// else RESET D5
 268:Core/Inc/lcd_stm32f0.c ****         {
 269:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D5_RESET;
 270:Core/Inc/lcd_stm32f0.c ****         }
 271:Core/Inc/lcd_stm32f0.c **** // DATALINE 4
 272:Core/Inc/lcd_stm32f0.c ****         if ((character & 0x01) != 0)	// Select bit 0 of command, if HIGH set Data line 4 (D4)
 273:Core/Inc/lcd_stm32f0.c ****         {
 274:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D4_SET;
 275:Core/Inc/lcd_stm32f0.c ****         }
 276:Core/Inc/lcd_stm32f0.c ****         else				//  else RESET D4
 277:Core/Inc/lcd_stm32f0.c ****         {
 278:Core/Inc/lcd_stm32f0.c ****         	GPIOB->BSRR |= LCD_D4_RESET;
 279:Core/Inc/lcd_stm32f0.c ****         }
 280:Core/Inc/lcd_stm32f0.c **** 
 281:Core/Inc/lcd_stm32f0.c ****         pulse_strobe();			// Send data
 282:Core/Inc/lcd_stm32f0.c **** }
 283:Core/Inc/lcd_stm32f0.c **** 
 284:Core/Inc/lcd_stm32f0.c **** //====================================================================
 285:Core/Inc/lcd_stm32f0.c **** // WRITE A STRING TO THE LCD - LCD_PutString(ptr_String)
 286:Core/Inc/lcd_stm32f0.c **** //====================================================================
 287:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: Writes a string to the LCD
 288:Core/Inc/lcd_stm32f0.c **** //====================================================================
 289:Core/Inc/lcd_stm32f0.c **** 
 290:Core/Inc/lcd_stm32f0.c **** void lcd_putstring(char *instring)
 291:Core/Inc/lcd_stm32f0.c **** {
 292:Core/Inc/lcd_stm32f0.c ****     unsigned char count = 0;
 293:Core/Inc/lcd_stm32f0.c **** 
 294:Core/Inc/lcd_stm32f0.c ****     while (instring[count])		// Until the null terminator is reached
 295:Core/Inc/lcd_stm32f0.c ****     {
 296:Core/Inc/lcd_stm32f0.c ****     	lcd_putchar(instring[count]);	// Write each character to LCD
 297:Core/Inc/lcd_stm32f0.c **** 	    count++;
 298:Core/Inc/lcd_stm32f0.c **** 	 }
 299:Core/Inc/lcd_stm32f0.c **** }
 300:Core/Inc/lcd_stm32f0.c **** 
 301:Core/Inc/lcd_stm32f0.c **** 
 302:Core/Inc/lcd_stm32f0.c **** //====================================================================
 303:Core/Inc/lcd_stm32f0.c **** // PULSE STROBE - Pulse_Strobe()
 304:Core/Inc/lcd_stm32f0.c **** //====================================================================
 305:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: Pulse the strobe line of the LCD to indicate that data is ready.
 306:Core/Inc/lcd_stm32f0.c **** //====================================================================
 307:Core/Inc/lcd_stm32f0.c **** 
 308:Core/Inc/lcd_stm32f0.c **** void pulse_strobe(void)
 309:Core/Inc/lcd_stm32f0.c **** {
 310:Core/Inc/lcd_stm32f0.c ****     delay(20);				// Delay
 311:Core/Inc/lcd_stm32f0.c **** 
 312:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_EN_SET;		// pull E (PC15) HIGH
 313:Core/Inc/lcd_stm32f0.c **** 
 314:Core/Inc/lcd_stm32f0.c ****     delay(20);				// Delay
 315:Core/Inc/lcd_stm32f0.c **** 
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 7


 316:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_EN_RESET;	// Take EN LOW
 317:Core/Inc/lcd_stm32f0.c **** 
 318:Core/Inc/lcd_stm32f0.c ****     delay(20);				// Delay
 319:Core/Inc/lcd_stm32f0.c **** 
 320:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_EN_SET;		// Take EN HIGH
 321:Core/Inc/lcd_stm32f0.c **** }
 322:Core/Inc/lcd_stm32f0.c **** 
 323:Core/Inc/lcd_stm32f0.c **** 
 324:Core/Inc/lcd_stm32f0.c **** //====================================================================
 325:Core/Inc/lcd_stm32f0.c **** // LOOP DELAY - delay(microseconds)
 326:Core/Inc/lcd_stm32f0.c **** //====================================================================
 327:Core/Inc/lcd_stm32f0.c **** // DESCRIPTION: A delay used by the LCD functions.
 328:Core/Inc/lcd_stm32f0.c **** //====================================================================
 329:Core/Inc/lcd_stm32f0.c **** 
 330:Core/Inc/lcd_stm32f0.c **** void delay(unsigned int microseconds)
 331:Core/Inc/lcd_stm32f0.c **** {
  29              		.loc 2 331 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              		.loc 2 331 1 is_stmt 0 view .LVU1
  35 0000 82B0     		sub	sp, sp, #8
  36              		.cfi_def_cfa_offset 8
 332:Core/Inc/lcd_stm32f0.c **** 	  volatile unsigned int counter;
  37              		.loc 2 332 4 is_stmt 1 view .LVU2
 333:Core/Inc/lcd_stm32f0.c **** 	  microseconds *= 3;
  38              		.loc 2 333 4 view .LVU3
  39              		.loc 2 333 17 is_stmt 0 view .LVU4
  40 0002 4300     		lsls	r3, r0, #1
  41 0004 1818     		adds	r0, r3, r0
  42              	.LVL1:
 334:Core/Inc/lcd_stm32f0.c **** 	  for(counter = 0; counter<microseconds; counter++)
  43              		.loc 2 334 4 is_stmt 1 view .LVU5
  44              		.loc 2 334 16 is_stmt 0 view .LVU6
  45 0006 0023     		movs	r3, #0
  46 0008 0193     		str	r3, [sp, #4]
  47              		.loc 2 334 4 view .LVU7
  48 000a 04E0     		b	.L2
  49              	.L3:
 335:Core/Inc/lcd_stm32f0.c **** 	  {
 336:Core/Inc/lcd_stm32f0.c **** 	    __asm("nop");
  50              		.loc 2 336 6 is_stmt 1 discriminator 3 view .LVU8
  51              		.syntax divided
  52              	@ 336 "Core/Inc/lcd_stm32f0.c" 1
  53 000c C046     		nop
  54              	@ 0 "" 2
 337:Core/Inc/lcd_stm32f0.c **** 	    __asm("nop");
  55              		.loc 2 337 6 discriminator 3 view .LVU9
  56              	@ 337 "Core/Inc/lcd_stm32f0.c" 1
  57 000e C046     		nop
  58              	@ 0 "" 2
 334:Core/Inc/lcd_stm32f0.c **** 	  for(counter = 0; counter<microseconds; counter++)
  59              		.loc 2 334 50 discriminator 3 view .LVU10
  60              		.thumb
  61              		.syntax unified
  62 0010 019B     		ldr	r3, [sp, #4]
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 8


  63 0012 0133     		adds	r3, r3, #1
  64 0014 0193     		str	r3, [sp, #4]
  65              	.L2:
 334:Core/Inc/lcd_stm32f0.c **** 	  for(counter = 0; counter<microseconds; counter++)
  66              		.loc 2 334 28 discriminator 1 view .LVU11
  67 0016 019B     		ldr	r3, [sp, #4]
  68 0018 8342     		cmp	r3, r0
  69 001a F7D3     		bcc	.L3
 338:Core/Inc/lcd_stm32f0.c **** 	  }
 339:Core/Inc/lcd_stm32f0.c **** }
  70              		.loc 2 339 1 is_stmt 0 view .LVU12
  71 001c 02B0     		add	sp, sp, #8
  72              		@ sp needed
  73 001e 7047     		bx	lr
  74              		.cfi_endproc
  75              	.LFE48:
  77              		.section	.text.pulse_strobe,"ax",%progbits
  78              		.align	1
  79              		.global	pulse_strobe
  80              		.syntax unified
  81              		.code	16
  82              		.thumb_func
  84              	pulse_strobe:
  85              	.LFB47:
 309:Core/Inc/lcd_stm32f0.c ****     delay(20);				// Delay
  86              		.loc 2 309 1 is_stmt 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90 0000 70B5     		push	{r4, r5, r6, lr}
  91              		.cfi_def_cfa_offset 16
  92              		.cfi_offset 4, -16
  93              		.cfi_offset 5, -12
  94              		.cfi_offset 6, -8
  95              		.cfi_offset 14, -4
 310:Core/Inc/lcd_stm32f0.c **** 
  96              		.loc 2 310 5 view .LVU14
  97 0002 1420     		movs	r0, #20
  98 0004 FFF7FEFF 		bl	delay
  99              	.LVL2:
 312:Core/Inc/lcd_stm32f0.c **** 
 100              		.loc 2 312 5 view .LVU15
 312:Core/Inc/lcd_stm32f0.c **** 
 101              		.loc 2 312 10 is_stmt 0 view .LVU16
 102 0008 0A4C     		ldr	r4, .L5
 103 000a A369     		ldr	r3, [r4, #24]
 312:Core/Inc/lcd_stm32f0.c **** 
 104              		.loc 2 312 17 view .LVU17
 105 000c 8025     		movs	r5, #128
 106 000e 2D02     		lsls	r5, r5, #8
 107 0010 2B43     		orrs	r3, r5
 108 0012 A361     		str	r3, [r4, #24]
 314:Core/Inc/lcd_stm32f0.c **** 
 109              		.loc 2 314 5 is_stmt 1 view .LVU18
 110 0014 1420     		movs	r0, #20
 111 0016 FFF7FEFF 		bl	delay
 112              	.LVL3:
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 9


 316:Core/Inc/lcd_stm32f0.c **** 
 113              		.loc 2 316 5 view .LVU19
 316:Core/Inc/lcd_stm32f0.c **** 
 114              		.loc 2 316 10 is_stmt 0 view .LVU20
 115 001a A269     		ldr	r2, [r4, #24]
 316:Core/Inc/lcd_stm32f0.c **** 
 116              		.loc 2 316 17 view .LVU21
 117 001c 8023     		movs	r3, #128
 118 001e 1B06     		lsls	r3, r3, #24
 119 0020 1343     		orrs	r3, r2
 120 0022 A361     		str	r3, [r4, #24]
 318:Core/Inc/lcd_stm32f0.c **** 
 121              		.loc 2 318 5 is_stmt 1 view .LVU22
 122 0024 1420     		movs	r0, #20
 123 0026 FFF7FEFF 		bl	delay
 124              	.LVL4:
 320:Core/Inc/lcd_stm32f0.c **** }
 125              		.loc 2 320 5 view .LVU23
 320:Core/Inc/lcd_stm32f0.c **** }
 126              		.loc 2 320 10 is_stmt 0 view .LVU24
 127 002a A369     		ldr	r3, [r4, #24]
 320:Core/Inc/lcd_stm32f0.c **** }
 128              		.loc 2 320 17 view .LVU25
 129 002c 1D43     		orrs	r5, r3
 130 002e A561     		str	r5, [r4, #24]
 321:Core/Inc/lcd_stm32f0.c **** 
 131              		.loc 2 321 1 view .LVU26
 132              		@ sp needed
 133 0030 70BD     		pop	{r4, r5, r6, pc}
 134              	.L6:
 135 0032 C046     		.align	2
 136              	.L5:
 137 0034 00080048 		.word	1207961600
 138              		.cfi_endproc
 139              	.LFE47:
 141              		.section	.text.lcd_putchar,"ax",%progbits
 142              		.align	1
 143              		.global	lcd_putchar
 144              		.syntax unified
 145              		.code	16
 146              		.thumb_func
 148              	lcd_putchar:
 149              	.LVL5:
 150              	.LFB45:
 199:Core/Inc/lcd_stm32f0.c **** 	GPIOC->BSRR |= LCD_RS_SET;	// Register Select (RS) line HIGH (data sent will now be read as text);
 151              		.loc 2 199 1 is_stmt 1 view -0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 199:Core/Inc/lcd_stm32f0.c **** 	GPIOC->BSRR |= LCD_RS_SET;	// Register Select (RS) line HIGH (data sent will now be read as text);
 155              		.loc 2 199 1 is_stmt 0 view .LVU28
 156 0000 10B5     		push	{r4, lr}
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 4, -8
 159              		.cfi_offset 14, -4
 160 0002 0400     		movs	r4, r0
 200:Core/Inc/lcd_stm32f0.c **** // Put upper nibble (upper 4-bits) on data lines, command mode
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 10


 161              		.loc 2 200 2 is_stmt 1 view .LVU29
 200:Core/Inc/lcd_stm32f0.c **** // Put upper nibble (upper 4-bits) on data lines, command mode
 162              		.loc 2 200 7 is_stmt 0 view .LVU30
 163 0004 454A     		ldr	r2, .L25
 164 0006 9169     		ldr	r1, [r2, #24]
 200:Core/Inc/lcd_stm32f0.c **** // Put upper nibble (upper 4-bits) on data lines, command mode
 165              		.loc 2 200 14 view .LVU31
 166 0008 8023     		movs	r3, #128
 167 000a DB01     		lsls	r3, r3, #7
 168 000c 0B43     		orrs	r3, r1
 169 000e 9361     		str	r3, [r2, #24]
 203:Core/Inc/lcd_stm32f0.c ****         {
 170              		.loc 2 203 9 is_stmt 1 view .LVU32
 203:Core/Inc/lcd_stm32f0.c ****         {
 171              		.loc 2 203 32 is_stmt 0 view .LVU33
 172 0010 43B2     		sxtb	r3, r0
 203:Core/Inc/lcd_stm32f0.c ****         {
 173              		.loc 2 203 12 view .LVU34
 174 0012 002B     		cmp	r3, #0
 175 0014 46DB     		blt	.L24
 209:Core/Inc/lcd_stm32f0.c ****         }
 176              		.loc 2 209 10 is_stmt 1 view .LVU35
 209:Core/Inc/lcd_stm32f0.c ****         }
 177              		.loc 2 209 15 is_stmt 0 view .LVU36
 178 0016 9022     		movs	r2, #144
 179 0018 D205     		lsls	r2, r2, #23
 180 001a 9169     		ldr	r1, [r2, #24]
 209:Core/Inc/lcd_stm32f0.c ****         }
 181              		.loc 2 209 22 view .LVU37
 182 001c 8023     		movs	r3, #128
 183 001e 1B06     		lsls	r3, r3, #24
 184 0020 0B43     		orrs	r3, r1
 185 0022 9361     		str	r3, [r2, #24]
 186              	.L9:
 212:Core/Inc/lcd_stm32f0.c **** 	{
 187              		.loc 2 212 9 is_stmt 1 view .LVU38
 212:Core/Inc/lcd_stm32f0.c **** 	{
 188              		.loc 2 212 12 is_stmt 0 view .LVU39
 189 0024 6306     		lsls	r3, r4, #25
 190 0026 45D5     		bpl	.L10
 214:Core/Inc/lcd_stm32f0.c ****         }
 191              		.loc 2 214 13 is_stmt 1 view .LVU40
 214:Core/Inc/lcd_stm32f0.c ****         }
 192              		.loc 2 214 18 is_stmt 0 view .LVU41
 193 0028 9022     		movs	r2, #144
 194 002a D205     		lsls	r2, r2, #23
 195 002c 9169     		ldr	r1, [r2, #24]
 214:Core/Inc/lcd_stm32f0.c ****         }
 196              		.loc 2 214 25 view .LVU42
 197 002e 8023     		movs	r3, #128
 198 0030 5B01     		lsls	r3, r3, #5
 199 0032 0B43     		orrs	r3, r1
 200 0034 9361     		str	r3, [r2, #24]
 201              	.L11:
 222:Core/Inc/lcd_stm32f0.c **** 
 202              		.loc 2 222 9 is_stmt 1 view .LVU43
 222:Core/Inc/lcd_stm32f0.c **** 
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 11


 203              		.loc 2 222 12 is_stmt 0 view .LVU44
 204 0036 A306     		lsls	r3, r4, #26
 205 0038 44D5     		bpl	.L12
 225:Core/Inc/lcd_stm32f0.c **** 	}
 206              		.loc 2 225 10 is_stmt 1 view .LVU45
 225:Core/Inc/lcd_stm32f0.c **** 	}
 207              		.loc 2 225 15 is_stmt 0 view .LVU46
 208 003a 394A     		ldr	r2, .L25+4
 209 003c 9169     		ldr	r1, [r2, #24]
 225:Core/Inc/lcd_stm32f0.c **** 	}
 210              		.loc 2 225 22 view .LVU47
 211 003e 8023     		movs	r3, #128
 212 0040 9B00     		lsls	r3, r3, #2
 213 0042 0B43     		orrs	r3, r1
 214 0044 9361     		str	r3, [r2, #24]
 215              	.L13:
 232:Core/Inc/lcd_stm32f0.c ****         {
 216              		.loc 2 232 9 is_stmt 1 view .LVU48
 232:Core/Inc/lcd_stm32f0.c ****         {
 217              		.loc 2 232 12 is_stmt 0 view .LVU49
 218 0046 E306     		lsls	r3, r4, #27
 219 0048 43D5     		bpl	.L14
 234:Core/Inc/lcd_stm32f0.c ****         }
 220              		.loc 2 234 10 is_stmt 1 view .LVU50
 234:Core/Inc/lcd_stm32f0.c ****         }
 221              		.loc 2 234 15 is_stmt 0 view .LVU51
 222 004a 354A     		ldr	r2, .L25+4
 223 004c 9169     		ldr	r1, [r2, #24]
 234:Core/Inc/lcd_stm32f0.c ****         }
 224              		.loc 2 234 22 view .LVU52
 225 004e 8023     		movs	r3, #128
 226 0050 5B00     		lsls	r3, r3, #1
 227 0052 0B43     		orrs	r3, r1
 228 0054 9361     		str	r3, [r2, #24]
 229              	.L15:
 241:Core/Inc/lcd_stm32f0.c **** 
 230              		.loc 2 241 9 is_stmt 1 view .LVU53
 231 0056 FFF7FEFF 		bl	pulse_strobe
 232              	.LVL6:
 244:Core/Inc/lcd_stm32f0.c ****         {
 233              		.loc 2 244 9 view .LVU54
 244:Core/Inc/lcd_stm32f0.c ****         {
 234              		.loc 2 244 12 is_stmt 0 view .LVU55
 235 005a 2307     		lsls	r3, r4, #28
 236 005c 40D5     		bpl	.L16
 246:Core/Inc/lcd_stm32f0.c ****         }
 237              		.loc 2 246 10 is_stmt 1 view .LVU56
 246:Core/Inc/lcd_stm32f0.c ****         }
 238              		.loc 2 246 15 is_stmt 0 view .LVU57
 239 005e 9022     		movs	r2, #144
 240 0060 D205     		lsls	r2, r2, #23
 241 0062 9169     		ldr	r1, [r2, #24]
 246:Core/Inc/lcd_stm32f0.c ****         }
 242              		.loc 2 246 22 view .LVU58
 243 0064 8023     		movs	r3, #128
 244 0066 1B02     		lsls	r3, r3, #8
 245 0068 0B43     		orrs	r3, r1
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 12


 246 006a 9361     		str	r3, [r2, #24]
 247              	.L17:
 253:Core/Inc/lcd_stm32f0.c **** 	{
 248              		.loc 2 253 9 is_stmt 1 view .LVU59
 253:Core/Inc/lcd_stm32f0.c **** 	{
 249              		.loc 2 253 12 is_stmt 0 view .LVU60
 250 006c 6307     		lsls	r3, r4, #29
 251 006e 3FD5     		bpl	.L18
 255:Core/Inc/lcd_stm32f0.c ****         }
 252              		.loc 2 255 13 is_stmt 1 view .LVU61
 255:Core/Inc/lcd_stm32f0.c ****         }
 253              		.loc 2 255 18 is_stmt 0 view .LVU62
 254 0070 9022     		movs	r2, #144
 255 0072 D205     		lsls	r2, r2, #23
 256 0074 9169     		ldr	r1, [r2, #24]
 255:Core/Inc/lcd_stm32f0.c ****         }
 257              		.loc 2 255 25 view .LVU63
 258 0076 8023     		movs	r3, #128
 259 0078 5B01     		lsls	r3, r3, #5
 260 007a 0B43     		orrs	r3, r1
 261 007c 9361     		str	r3, [r2, #24]
 262              	.L19:
 263:Core/Inc/lcd_stm32f0.c ****         {
 263              		.loc 2 263 9 is_stmt 1 view .LVU64
 263:Core/Inc/lcd_stm32f0.c ****         {
 264              		.loc 2 263 12 is_stmt 0 view .LVU65
 265 007e A307     		lsls	r3, r4, #30
 266 0080 3ED5     		bpl	.L20
 265:Core/Inc/lcd_stm32f0.c **** 	}
 267              		.loc 2 265 10 is_stmt 1 view .LVU66
 265:Core/Inc/lcd_stm32f0.c **** 	}
 268              		.loc 2 265 15 is_stmt 0 view .LVU67
 269 0082 274A     		ldr	r2, .L25+4
 270 0084 9169     		ldr	r1, [r2, #24]
 265:Core/Inc/lcd_stm32f0.c **** 	}
 271              		.loc 2 265 22 view .LVU68
 272 0086 8023     		movs	r3, #128
 273 0088 9B00     		lsls	r3, r3, #2
 274 008a 0B43     		orrs	r3, r1
 275 008c 9361     		str	r3, [r2, #24]
 276              	.L21:
 272:Core/Inc/lcd_stm32f0.c ****         {
 277              		.loc 2 272 9 is_stmt 1 view .LVU69
 272:Core/Inc/lcd_stm32f0.c ****         {
 278              		.loc 2 272 12 is_stmt 0 view .LVU70
 279 008e E407     		lsls	r4, r4, #31
 280 0090 3DD5     		bpl	.L22
 274:Core/Inc/lcd_stm32f0.c ****         }
 281              		.loc 2 274 10 is_stmt 1 view .LVU71
 274:Core/Inc/lcd_stm32f0.c ****         }
 282              		.loc 2 274 15 is_stmt 0 view .LVU72
 283 0092 234A     		ldr	r2, .L25+4
 284 0094 9169     		ldr	r1, [r2, #24]
 274:Core/Inc/lcd_stm32f0.c ****         }
 285              		.loc 2 274 22 view .LVU73
 286 0096 8023     		movs	r3, #128
 287 0098 5B00     		lsls	r3, r3, #1
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 13


 288 009a 0B43     		orrs	r3, r1
 289 009c 9361     		str	r3, [r2, #24]
 290              	.L23:
 281:Core/Inc/lcd_stm32f0.c **** }
 291              		.loc 2 281 9 is_stmt 1 view .LVU74
 292 009e FFF7FEFF 		bl	pulse_strobe
 293              	.LVL7:
 282:Core/Inc/lcd_stm32f0.c **** 
 294              		.loc 2 282 1 is_stmt 0 view .LVU75
 295              		@ sp needed
 296 00a2 10BD     		pop	{r4, pc}
 297              	.LVL8:
 298              	.L24:
 205:Core/Inc/lcd_stm32f0.c ****         }
 299              		.loc 2 205 10 is_stmt 1 view .LVU76
 205:Core/Inc/lcd_stm32f0.c ****         }
 300              		.loc 2 205 15 is_stmt 0 view .LVU77
 301 00a4 9022     		movs	r2, #144
 302 00a6 D205     		lsls	r2, r2, #23
 303 00a8 9169     		ldr	r1, [r2, #24]
 205:Core/Inc/lcd_stm32f0.c ****         }
 304              		.loc 2 205 22 view .LVU78
 305 00aa 8023     		movs	r3, #128
 306 00ac 1B02     		lsls	r3, r3, #8
 307 00ae 0B43     		orrs	r3, r1
 308 00b0 9361     		str	r3, [r2, #24]
 309 00b2 B7E7     		b	.L9
 310              	.L10:
 219:Core/Inc/lcd_stm32f0.c ****         }
 311              		.loc 2 219 13 is_stmt 1 view .LVU79
 219:Core/Inc/lcd_stm32f0.c ****         }
 312              		.loc 2 219 18 is_stmt 0 view .LVU80
 313 00b4 9022     		movs	r2, #144
 314 00b6 D205     		lsls	r2, r2, #23
 315 00b8 9169     		ldr	r1, [r2, #24]
 219:Core/Inc/lcd_stm32f0.c ****         }
 316              		.loc 2 219 25 view .LVU81
 317 00ba 8023     		movs	r3, #128
 318 00bc 5B05     		lsls	r3, r3, #21
 319 00be 0B43     		orrs	r3, r1
 320 00c0 9361     		str	r3, [r2, #24]
 321 00c2 B8E7     		b	.L11
 322              	.L12:
 229:Core/Inc/lcd_stm32f0.c ****         }
 323              		.loc 2 229 10 is_stmt 1 view .LVU82
 229:Core/Inc/lcd_stm32f0.c ****         }
 324              		.loc 2 229 15 is_stmt 0 view .LVU83
 325 00c4 164A     		ldr	r2, .L25+4
 326 00c6 9169     		ldr	r1, [r2, #24]
 229:Core/Inc/lcd_stm32f0.c ****         }
 327              		.loc 2 229 22 view .LVU84
 328 00c8 8023     		movs	r3, #128
 329 00ca 9B04     		lsls	r3, r3, #18
 330 00cc 0B43     		orrs	r3, r1
 331 00ce 9361     		str	r3, [r2, #24]
 332 00d0 B9E7     		b	.L13
 333              	.L14:
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 14


 238:Core/Inc/lcd_stm32f0.c ****         }
 334              		.loc 2 238 10 is_stmt 1 view .LVU85
 238:Core/Inc/lcd_stm32f0.c ****         }
 335              		.loc 2 238 15 is_stmt 0 view .LVU86
 336 00d2 134A     		ldr	r2, .L25+4
 337 00d4 9169     		ldr	r1, [r2, #24]
 238:Core/Inc/lcd_stm32f0.c ****         }
 338              		.loc 2 238 22 view .LVU87
 339 00d6 8023     		movs	r3, #128
 340 00d8 5B04     		lsls	r3, r3, #17
 341 00da 0B43     		orrs	r3, r1
 342 00dc 9361     		str	r3, [r2, #24]
 343 00de BAE7     		b	.L15
 344              	.LVL9:
 345              	.L16:
 250:Core/Inc/lcd_stm32f0.c ****         }
 346              		.loc 2 250 10 is_stmt 1 view .LVU88
 250:Core/Inc/lcd_stm32f0.c ****         }
 347              		.loc 2 250 15 is_stmt 0 view .LVU89
 348 00e0 9022     		movs	r2, #144
 349 00e2 D205     		lsls	r2, r2, #23
 350 00e4 9169     		ldr	r1, [r2, #24]
 250:Core/Inc/lcd_stm32f0.c ****         }
 351              		.loc 2 250 22 view .LVU90
 352 00e6 8023     		movs	r3, #128
 353 00e8 1B06     		lsls	r3, r3, #24
 354 00ea 0B43     		orrs	r3, r1
 355 00ec 9361     		str	r3, [r2, #24]
 356 00ee BDE7     		b	.L17
 357              	.L18:
 260:Core/Inc/lcd_stm32f0.c ****         }
 358              		.loc 2 260 13 is_stmt 1 view .LVU91
 260:Core/Inc/lcd_stm32f0.c ****         }
 359              		.loc 2 260 18 is_stmt 0 view .LVU92
 360 00f0 9022     		movs	r2, #144
 361 00f2 D205     		lsls	r2, r2, #23
 362 00f4 9169     		ldr	r1, [r2, #24]
 260:Core/Inc/lcd_stm32f0.c ****         }
 363              		.loc 2 260 25 view .LVU93
 364 00f6 8023     		movs	r3, #128
 365 00f8 5B05     		lsls	r3, r3, #21
 366 00fa 0B43     		orrs	r3, r1
 367 00fc 9361     		str	r3, [r2, #24]
 368 00fe BEE7     		b	.L19
 369              	.L20:
 269:Core/Inc/lcd_stm32f0.c ****         }
 370              		.loc 2 269 10 is_stmt 1 view .LVU94
 269:Core/Inc/lcd_stm32f0.c ****         }
 371              		.loc 2 269 15 is_stmt 0 view .LVU95
 372 0100 074A     		ldr	r2, .L25+4
 373 0102 9169     		ldr	r1, [r2, #24]
 269:Core/Inc/lcd_stm32f0.c ****         }
 374              		.loc 2 269 22 view .LVU96
 375 0104 8023     		movs	r3, #128
 376 0106 9B04     		lsls	r3, r3, #18
 377 0108 0B43     		orrs	r3, r1
 378 010a 9361     		str	r3, [r2, #24]
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 15


 379 010c BFE7     		b	.L21
 380              	.L22:
 278:Core/Inc/lcd_stm32f0.c ****         }
 381              		.loc 2 278 10 is_stmt 1 view .LVU97
 278:Core/Inc/lcd_stm32f0.c ****         }
 382              		.loc 2 278 15 is_stmt 0 view .LVU98
 383 010e 044A     		ldr	r2, .L25+4
 384 0110 9169     		ldr	r1, [r2, #24]
 278:Core/Inc/lcd_stm32f0.c ****         }
 385              		.loc 2 278 22 view .LVU99
 386 0112 8023     		movs	r3, #128
 387 0114 5B04     		lsls	r3, r3, #17
 388 0116 0B43     		orrs	r3, r1
 389 0118 9361     		str	r3, [r2, #24]
 390 011a C0E7     		b	.L23
 391              	.L26:
 392              		.align	2
 393              	.L25:
 394 011c 00080048 		.word	1207961600
 395 0120 00040048 		.word	1207960576
 396              		.cfi_endproc
 397              	.LFE45:
 399              		.section	.text.lcd_putstring,"ax",%progbits
 400              		.align	1
 401              		.global	lcd_putstring
 402              		.syntax unified
 403              		.code	16
 404              		.thumb_func
 406              	lcd_putstring:
 407              	.LVL10:
 408              	.LFB46:
 291:Core/Inc/lcd_stm32f0.c ****     unsigned char count = 0;
 409              		.loc 2 291 1 is_stmt 1 view -0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 0
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 291:Core/Inc/lcd_stm32f0.c ****     unsigned char count = 0;
 413              		.loc 2 291 1 is_stmt 0 view .LVU101
 414 0000 70B5     		push	{r4, r5, r6, lr}
 415              		.cfi_def_cfa_offset 16
 416              		.cfi_offset 4, -16
 417              		.cfi_offset 5, -12
 418              		.cfi_offset 6, -8
 419              		.cfi_offset 14, -4
 420 0002 0500     		movs	r5, r0
 292:Core/Inc/lcd_stm32f0.c **** 
 421              		.loc 2 292 5 is_stmt 1 view .LVU102
 422              	.LVL11:
 294:Core/Inc/lcd_stm32f0.c ****     {
 423              		.loc 2 294 5 view .LVU103
 292:Core/Inc/lcd_stm32f0.c **** 
 424              		.loc 2 292 19 is_stmt 0 view .LVU104
 425 0004 0024     		movs	r4, #0
 294:Core/Inc/lcd_stm32f0.c ****     {
 426              		.loc 2 294 11 view .LVU105
 427 0006 03E0     		b	.L28
 428              	.LVL12:
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 16


 429              	.L29:
 296:Core/Inc/lcd_stm32f0.c **** 	    count++;
 430              		.loc 2 296 6 is_stmt 1 view .LVU106
 431 0008 FFF7FEFF 		bl	lcd_putchar
 432              	.LVL13:
 297:Core/Inc/lcd_stm32f0.c **** 	 }
 433              		.loc 2 297 6 view .LVU107
 297:Core/Inc/lcd_stm32f0.c **** 	 }
 434              		.loc 2 297 11 is_stmt 0 view .LVU108
 435 000c 0134     		adds	r4, r4, #1
 436              	.LVL14:
 297:Core/Inc/lcd_stm32f0.c **** 	 }
 437              		.loc 2 297 11 view .LVU109
 438 000e E4B2     		uxtb	r4, r4
 439              	.LVL15:
 440              	.L28:
 294:Core/Inc/lcd_stm32f0.c ****     {
 441              		.loc 2 294 12 is_stmt 1 view .LVU110
 294:Core/Inc/lcd_stm32f0.c ****     {
 442              		.loc 2 294 20 is_stmt 0 view .LVU111
 443 0010 285D     		ldrb	r0, [r5, r4]
 294:Core/Inc/lcd_stm32f0.c ****     {
 444              		.loc 2 294 12 view .LVU112
 445 0012 0028     		cmp	r0, #0
 446 0014 F8D1     		bne	.L29
 299:Core/Inc/lcd_stm32f0.c **** 
 447              		.loc 2 299 1 view .LVU113
 448              		@ sp needed
 449              	.LVL16:
 450              	.LVL17:
 299:Core/Inc/lcd_stm32f0.c **** 
 451              		.loc 2 299 1 view .LVU114
 452 0016 70BD     		pop	{r4, r5, r6, pc}
 453              		.cfi_endproc
 454              	.LFE46:
 456              		.section	.text.lcd_command,"ax",%progbits
 457              		.align	1
 458              		.global	lcd_command
 459              		.syntax unified
 460              		.code	16
 461              		.thumb_func
 463              	lcd_command:
 464              	.LVL18:
 465              	.LFB43:
  72:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_RS_RESET;	// Register Select (RS)line low (data sent will now be read as com
 466              		.loc 2 72 1 is_stmt 1 view -0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 0
 469              		@ frame_needed = 0, uses_anonymous_args = 0
  72:Core/Inc/lcd_stm32f0.c ****     GPIOC->BSRR |= LCD_RS_RESET;	// Register Select (RS)line low (data sent will now be read as com
 470              		.loc 2 72 1 is_stmt 0 view .LVU116
 471 0000 10B5     		push	{r4, lr}
 472              		.cfi_def_cfa_offset 8
 473              		.cfi_offset 4, -8
 474              		.cfi_offset 14, -4
 475 0002 0400     		movs	r4, r0
  73:Core/Inc/lcd_stm32f0.c **** 
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 17


 476              		.loc 2 73 5 is_stmt 1 view .LVU117
  73:Core/Inc/lcd_stm32f0.c **** 
 477              		.loc 2 73 10 is_stmt 0 view .LVU118
 478 0004 474A     		ldr	r2, .L48
 479 0006 9169     		ldr	r1, [r2, #24]
  73:Core/Inc/lcd_stm32f0.c **** 
 480              		.loc 2 73 17 view .LVU119
 481 0008 8023     		movs	r3, #128
 482 000a DB05     		lsls	r3, r3, #23
 483 000c 0B43     		orrs	r3, r1
 484 000e 9361     		str	r3, [r2, #24]
  77:Core/Inc/lcd_stm32f0.c ****     {
 485              		.loc 2 77 5 is_stmt 1 view .LVU120
  77:Core/Inc/lcd_stm32f0.c ****     {
 486              		.loc 2 77 26 is_stmt 0 view .LVU121
 487 0010 43B2     		sxtb	r3, r0
  77:Core/Inc/lcd_stm32f0.c ****     {
 488              		.loc 2 77 8 view .LVU122
 489 0012 002B     		cmp	r3, #0
 490 0014 49DB     		blt	.L47
  83:Core/Inc/lcd_stm32f0.c ****     }
 491              		.loc 2 83 6 is_stmt 1 view .LVU123
  83:Core/Inc/lcd_stm32f0.c ****     }
 492              		.loc 2 83 11 is_stmt 0 view .LVU124
 493 0016 9022     		movs	r2, #144
 494 0018 D205     		lsls	r2, r2, #23
 495 001a 9169     		ldr	r1, [r2, #24]
  83:Core/Inc/lcd_stm32f0.c ****     }
 496              		.loc 2 83 18 view .LVU125
 497 001c 8023     		movs	r3, #128
 498 001e 1B06     		lsls	r3, r3, #24
 499 0020 0B43     		orrs	r3, r1
 500 0022 9361     		str	r3, [r2, #24]
 501              	.L32:
  86:Core/Inc/lcd_stm32f0.c ****     {
 502              		.loc 2 86 5 is_stmt 1 view .LVU126
  86:Core/Inc/lcd_stm32f0.c ****     {
 503              		.loc 2 86 8 is_stmt 0 view .LVU127
 504 0024 6306     		lsls	r3, r4, #25
 505 0026 48D5     		bpl	.L33
  88:Core/Inc/lcd_stm32f0.c ****     }
 506              		.loc 2 88 9 is_stmt 1 view .LVU128
  88:Core/Inc/lcd_stm32f0.c ****     }
 507              		.loc 2 88 14 is_stmt 0 view .LVU129
 508 0028 9022     		movs	r2, #144
 509 002a D205     		lsls	r2, r2, #23
 510 002c 9169     		ldr	r1, [r2, #24]
  88:Core/Inc/lcd_stm32f0.c ****     }
 511              		.loc 2 88 21 view .LVU130
 512 002e 8023     		movs	r3, #128
 513 0030 5B01     		lsls	r3, r3, #5
 514 0032 0B43     		orrs	r3, r1
 515 0034 9361     		str	r3, [r2, #24]
 516              	.L34:
  95:Core/Inc/lcd_stm32f0.c ****     {
 517              		.loc 2 95 5 is_stmt 1 view .LVU131
  95:Core/Inc/lcd_stm32f0.c ****     {
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 18


 518              		.loc 2 95 8 is_stmt 0 view .LVU132
 519 0036 A306     		lsls	r3, r4, #26
 520 0038 47D5     		bpl	.L35
  97:Core/Inc/lcd_stm32f0.c ****     }
 521              		.loc 2 97 6 is_stmt 1 view .LVU133
  97:Core/Inc/lcd_stm32f0.c ****     }
 522              		.loc 2 97 11 is_stmt 0 view .LVU134
 523 003a 3B4A     		ldr	r2, .L48+4
 524 003c 9169     		ldr	r1, [r2, #24]
  97:Core/Inc/lcd_stm32f0.c ****     }
 525              		.loc 2 97 18 view .LVU135
 526 003e 8023     		movs	r3, #128
 527 0040 9B00     		lsls	r3, r3, #2
 528 0042 0B43     		orrs	r3, r1
 529 0044 9361     		str	r3, [r2, #24]
 530              	.L36:
 104:Core/Inc/lcd_stm32f0.c ****     {
 531              		.loc 2 104 5 is_stmt 1 view .LVU136
 104:Core/Inc/lcd_stm32f0.c ****     {
 532              		.loc 2 104 8 is_stmt 0 view .LVU137
 533 0046 E306     		lsls	r3, r4, #27
 534 0048 46D5     		bpl	.L37
 106:Core/Inc/lcd_stm32f0.c ****     }
 535              		.loc 2 106 6 is_stmt 1 view .LVU138
 106:Core/Inc/lcd_stm32f0.c ****     }
 536              		.loc 2 106 11 is_stmt 0 view .LVU139
 537 004a 374A     		ldr	r2, .L48+4
 538 004c 9169     		ldr	r1, [r2, #24]
 106:Core/Inc/lcd_stm32f0.c ****     }
 539              		.loc 2 106 18 view .LVU140
 540 004e 8023     		movs	r3, #128
 541 0050 5B00     		lsls	r3, r3, #1
 542 0052 0B43     		orrs	r3, r1
 543 0054 9361     		str	r3, [r2, #24]
 544              	.L38:
 113:Core/Inc/lcd_stm32f0.c **** 
 545              		.loc 2 113 5 is_stmt 1 view .LVU141
 546 0056 FFF7FEFF 		bl	pulse_strobe
 547              	.LVL19:
 116:Core/Inc/lcd_stm32f0.c ****     {
 548              		.loc 2 116 5 view .LVU142
 116:Core/Inc/lcd_stm32f0.c ****     {
 549              		.loc 2 116 8 is_stmt 0 view .LVU143
 550 005a 2307     		lsls	r3, r4, #28
 551 005c 43D5     		bpl	.L39
 118:Core/Inc/lcd_stm32f0.c ****     }
 552              		.loc 2 118 6 is_stmt 1 view .LVU144
 118:Core/Inc/lcd_stm32f0.c ****     }
 553              		.loc 2 118 11 is_stmt 0 view .LVU145
 554 005e 9022     		movs	r2, #144
 555 0060 D205     		lsls	r2, r2, #23
 556 0062 9169     		ldr	r1, [r2, #24]
 118:Core/Inc/lcd_stm32f0.c ****     }
 557              		.loc 2 118 18 view .LVU146
 558 0064 8023     		movs	r3, #128
 559 0066 1B02     		lsls	r3, r3, #8
 560 0068 0B43     		orrs	r3, r1
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 19


 561 006a 9361     		str	r3, [r2, #24]
 562              	.L40:
 125:Core/Inc/lcd_stm32f0.c ****     {
 563              		.loc 2 125 5 is_stmt 1 view .LVU147
 125:Core/Inc/lcd_stm32f0.c ****     {
 564              		.loc 2 125 8 is_stmt 0 view .LVU148
 565 006c 6307     		lsls	r3, r4, #29
 566 006e 42D5     		bpl	.L41
 127:Core/Inc/lcd_stm32f0.c ****     }
 567              		.loc 2 127 9 is_stmt 1 view .LVU149
 127:Core/Inc/lcd_stm32f0.c ****     }
 568              		.loc 2 127 14 is_stmt 0 view .LVU150
 569 0070 9022     		movs	r2, #144
 570 0072 D205     		lsls	r2, r2, #23
 571 0074 9169     		ldr	r1, [r2, #24]
 127:Core/Inc/lcd_stm32f0.c ****     }
 572              		.loc 2 127 21 view .LVU151
 573 0076 8023     		movs	r3, #128
 574 0078 5B01     		lsls	r3, r3, #5
 575 007a 0B43     		orrs	r3, r1
 576 007c 9361     		str	r3, [r2, #24]
 577              	.L42:
 134:Core/Inc/lcd_stm32f0.c ****     {
 578              		.loc 2 134 5 is_stmt 1 view .LVU152
 134:Core/Inc/lcd_stm32f0.c ****     {
 579              		.loc 2 134 8 is_stmt 0 view .LVU153
 580 007e A307     		lsls	r3, r4, #30
 581 0080 41D5     		bpl	.L43
 136:Core/Inc/lcd_stm32f0.c ****     }
 582              		.loc 2 136 6 is_stmt 1 view .LVU154
 136:Core/Inc/lcd_stm32f0.c ****     }
 583              		.loc 2 136 11 is_stmt 0 view .LVU155
 584 0082 294A     		ldr	r2, .L48+4
 585 0084 9169     		ldr	r1, [r2, #24]
 136:Core/Inc/lcd_stm32f0.c ****     }
 586              		.loc 2 136 18 view .LVU156
 587 0086 8023     		movs	r3, #128
 588 0088 9B00     		lsls	r3, r3, #2
 589 008a 0B43     		orrs	r3, r1
 590 008c 9361     		str	r3, [r2, #24]
 591              	.L44:
 143:Core/Inc/lcd_stm32f0.c ****     {
 592              		.loc 2 143 5 is_stmt 1 view .LVU157
 143:Core/Inc/lcd_stm32f0.c ****     {
 593              		.loc 2 143 8 is_stmt 0 view .LVU158
 594 008e E407     		lsls	r4, r4, #31
 595 0090 40D5     		bpl	.L45
 145:Core/Inc/lcd_stm32f0.c ****     }
 596              		.loc 2 145 6 is_stmt 1 view .LVU159
 145:Core/Inc/lcd_stm32f0.c ****     }
 597              		.loc 2 145 11 is_stmt 0 view .LVU160
 598 0092 254A     		ldr	r2, .L48+4
 599 0094 9169     		ldr	r1, [r2, #24]
 145:Core/Inc/lcd_stm32f0.c ****     }
 600              		.loc 2 145 18 view .LVU161
 601 0096 8023     		movs	r3, #128
 602 0098 5B00     		lsls	r3, r3, #1
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 20


 603 009a 0B43     		orrs	r3, r1
 604 009c 9361     		str	r3, [r2, #24]
 605              	.L46:
 152:Core/Inc/lcd_stm32f0.c ****     delay(3000);
 606              		.loc 2 152 5 is_stmt 1 view .LVU162
 607 009e FFF7FEFF 		bl	pulse_strobe
 608              	.LVL20:
 153:Core/Inc/lcd_stm32f0.c **** }
 609              		.loc 2 153 5 view .LVU163
 610 00a2 2248     		ldr	r0, .L48+8
 611 00a4 FFF7FEFF 		bl	delay
 612              	.LVL21:
 154:Core/Inc/lcd_stm32f0.c **** 
 613              		.loc 2 154 1 is_stmt 0 view .LVU164
 614              		@ sp needed
 615 00a8 10BD     		pop	{r4, pc}
 616              	.LVL22:
 617              	.L47:
  79:Core/Inc/lcd_stm32f0.c ****     }
 618              		.loc 2 79 6 is_stmt 1 view .LVU165
  79:Core/Inc/lcd_stm32f0.c ****     }
 619              		.loc 2 79 11 is_stmt 0 view .LVU166
 620 00aa 9022     		movs	r2, #144
 621 00ac D205     		lsls	r2, r2, #23
 622 00ae 9169     		ldr	r1, [r2, #24]
  79:Core/Inc/lcd_stm32f0.c ****     }
 623              		.loc 2 79 18 view .LVU167
 624 00b0 8023     		movs	r3, #128
 625 00b2 1B02     		lsls	r3, r3, #8
 626 00b4 0B43     		orrs	r3, r1
 627 00b6 9361     		str	r3, [r2, #24]
 628 00b8 B4E7     		b	.L32
 629              	.L33:
  92:Core/Inc/lcd_stm32f0.c ****     }
 630              		.loc 2 92 9 is_stmt 1 view .LVU168
  92:Core/Inc/lcd_stm32f0.c ****     }
 631              		.loc 2 92 14 is_stmt 0 view .LVU169
 632 00ba 9022     		movs	r2, #144
 633 00bc D205     		lsls	r2, r2, #23
 634 00be 9169     		ldr	r1, [r2, #24]
  92:Core/Inc/lcd_stm32f0.c ****     }
 635              		.loc 2 92 21 view .LVU170
 636 00c0 8023     		movs	r3, #128
 637 00c2 5B05     		lsls	r3, r3, #21
 638 00c4 0B43     		orrs	r3, r1
 639 00c6 9361     		str	r3, [r2, #24]
 640 00c8 B5E7     		b	.L34
 641              	.L35:
 101:Core/Inc/lcd_stm32f0.c ****     }
 642              		.loc 2 101 6 is_stmt 1 view .LVU171
 101:Core/Inc/lcd_stm32f0.c ****     }
 643              		.loc 2 101 11 is_stmt 0 view .LVU172
 644 00ca 174A     		ldr	r2, .L48+4
 645 00cc 9169     		ldr	r1, [r2, #24]
 101:Core/Inc/lcd_stm32f0.c ****     }
 646              		.loc 2 101 18 view .LVU173
 647 00ce 8023     		movs	r3, #128
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 21


 648 00d0 9B04     		lsls	r3, r3, #18
 649 00d2 0B43     		orrs	r3, r1
 650 00d4 9361     		str	r3, [r2, #24]
 651 00d6 B6E7     		b	.L36
 652              	.L37:
 110:Core/Inc/lcd_stm32f0.c ****     }
 653              		.loc 2 110 6 is_stmt 1 view .LVU174
 110:Core/Inc/lcd_stm32f0.c ****     }
 654              		.loc 2 110 11 is_stmt 0 view .LVU175
 655 00d8 134A     		ldr	r2, .L48+4
 656 00da 9169     		ldr	r1, [r2, #24]
 110:Core/Inc/lcd_stm32f0.c ****     }
 657              		.loc 2 110 18 view .LVU176
 658 00dc 8023     		movs	r3, #128
 659 00de 5B04     		lsls	r3, r3, #17
 660 00e0 0B43     		orrs	r3, r1
 661 00e2 9361     		str	r3, [r2, #24]
 662 00e4 B7E7     		b	.L38
 663              	.LVL23:
 664              	.L39:
 122:Core/Inc/lcd_stm32f0.c ****     }
 665              		.loc 2 122 6 is_stmt 1 view .LVU177
 122:Core/Inc/lcd_stm32f0.c ****     }
 666              		.loc 2 122 11 is_stmt 0 view .LVU178
 667 00e6 9022     		movs	r2, #144
 668 00e8 D205     		lsls	r2, r2, #23
 669 00ea 9169     		ldr	r1, [r2, #24]
 122:Core/Inc/lcd_stm32f0.c ****     }
 670              		.loc 2 122 18 view .LVU179
 671 00ec 8023     		movs	r3, #128
 672 00ee 1B06     		lsls	r3, r3, #24
 673 00f0 0B43     		orrs	r3, r1
 674 00f2 9361     		str	r3, [r2, #24]
 675 00f4 BAE7     		b	.L40
 676              	.L41:
 131:Core/Inc/lcd_stm32f0.c ****     }
 677              		.loc 2 131 9 is_stmt 1 view .LVU180
 131:Core/Inc/lcd_stm32f0.c ****     }
 678              		.loc 2 131 14 is_stmt 0 view .LVU181
 679 00f6 9022     		movs	r2, #144
 680 00f8 D205     		lsls	r2, r2, #23
 681 00fa 9169     		ldr	r1, [r2, #24]
 131:Core/Inc/lcd_stm32f0.c ****     }
 682              		.loc 2 131 21 view .LVU182
 683 00fc 8023     		movs	r3, #128
 684 00fe 5B05     		lsls	r3, r3, #21
 685 0100 0B43     		orrs	r3, r1
 686 0102 9361     		str	r3, [r2, #24]
 687 0104 BBE7     		b	.L42
 688              	.L43:
 140:Core/Inc/lcd_stm32f0.c ****     }
 689              		.loc 2 140 6 is_stmt 1 view .LVU183
 140:Core/Inc/lcd_stm32f0.c ****     }
 690              		.loc 2 140 11 is_stmt 0 view .LVU184
 691 0106 084A     		ldr	r2, .L48+4
 692 0108 9169     		ldr	r1, [r2, #24]
 140:Core/Inc/lcd_stm32f0.c ****     }
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 22


 693              		.loc 2 140 18 view .LVU185
 694 010a 8023     		movs	r3, #128
 695 010c 9B04     		lsls	r3, r3, #18
 696 010e 0B43     		orrs	r3, r1
 697 0110 9361     		str	r3, [r2, #24]
 698 0112 BCE7     		b	.L44
 699              	.L45:
 149:Core/Inc/lcd_stm32f0.c ****     }
 700              		.loc 2 149 6 is_stmt 1 view .LVU186
 149:Core/Inc/lcd_stm32f0.c ****     }
 701              		.loc 2 149 11 is_stmt 0 view .LVU187
 702 0114 044A     		ldr	r2, .L48+4
 703 0116 9169     		ldr	r1, [r2, #24]
 149:Core/Inc/lcd_stm32f0.c ****     }
 704              		.loc 2 149 18 view .LVU188
 705 0118 8023     		movs	r3, #128
 706 011a 5B04     		lsls	r3, r3, #17
 707 011c 0B43     		orrs	r3, r1
 708 011e 9361     		str	r3, [r2, #24]
 709 0120 BDE7     		b	.L46
 710              	.L49:
 711 0122 C046     		.align	2
 712              	.L48:
 713 0124 00080048 		.word	1207961600
 714 0128 00040048 		.word	1207960576
 715 012c B80B0000 		.word	3000
 716              		.cfi_endproc
 717              	.LFE43:
 719              		.section	.text.init_LCD,"ax",%progbits
 720              		.align	1
 721              		.global	init_LCD
 722              		.syntax unified
 723              		.code	16
 724              		.thumb_func
 726              	init_LCD:
 727              	.LFB44:
 168:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOAEN;	// Connect clocks to GPIO A, B and C
 728              		.loc 2 168 1 is_stmt 1 view -0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 0
 731              		@ frame_needed = 0, uses_anonymous_args = 0
 732 0000 10B5     		push	{r4, lr}
 733              		.cfi_def_cfa_offset 8
 734              		.cfi_offset 4, -8
 735              		.cfi_offset 14, -4
 169:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 736              		.loc 2 169 5 view .LVU190
 169:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 737              		.loc 2 169 8 is_stmt 0 view .LVU191
 738 0002 1B4B     		ldr	r3, .L51
 739 0004 5969     		ldr	r1, [r3, #20]
 169:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 740              		.loc 2 169 17 view .LVU192
 741 0006 8022     		movs	r2, #128
 742 0008 9202     		lsls	r2, r2, #10
 743 000a 0A43     		orrs	r2, r1
 744 000c 5A61     		str	r2, [r3, #20]
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 23


 170:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 745              		.loc 2 170 5 is_stmt 1 view .LVU193
 170:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 746              		.loc 2 170 8 is_stmt 0 view .LVU194
 747 000e 5969     		ldr	r1, [r3, #20]
 170:Core/Inc/lcd_stm32f0.c ****     RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 748              		.loc 2 170 17 view .LVU195
 749 0010 8022     		movs	r2, #128
 750 0012 D202     		lsls	r2, r2, #11
 751 0014 0A43     		orrs	r2, r1
 752 0016 5A61     		str	r2, [r3, #20]
 171:Core/Inc/lcd_stm32f0.c **** 
 753              		.loc 2 171 5 is_stmt 1 view .LVU196
 171:Core/Inc/lcd_stm32f0.c **** 
 754              		.loc 2 171 8 is_stmt 0 view .LVU197
 755 0018 5969     		ldr	r1, [r3, #20]
 171:Core/Inc/lcd_stm32f0.c **** 
 756              		.loc 2 171 17 view .LVU198
 757 001a 8022     		movs	r2, #128
 758 001c 1203     		lsls	r2, r2, #12
 759 001e 0A43     		orrs	r2, r1
 760 0020 5A61     		str	r2, [r3, #20]
 173:Core/Inc/lcd_stm32f0.c ****     GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 761              		.loc 2 173 5 is_stmt 1 view .LVU199
 173:Core/Inc/lcd_stm32f0.c ****     GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 762              		.loc 2 173 10 is_stmt 0 view .LVU200
 763 0022 9022     		movs	r2, #144
 764 0024 D205     		lsls	r2, r2, #23
 765 0026 1168     		ldr	r1, [r2]
 173:Core/Inc/lcd_stm32f0.c ****     GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 766              		.loc 2 173 18 view .LVU201
 767 0028 8223     		movs	r3, #130
 768 002a DB05     		lsls	r3, r3, #23
 769 002c 0B43     		orrs	r3, r1
 770 002e 1360     		str	r3, [r2]
 174:Core/Inc/lcd_stm32f0.c ****     GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 771              		.loc 2 174 5 is_stmt 1 view .LVU202
 174:Core/Inc/lcd_stm32f0.c ****     GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 772              		.loc 2 174 10 is_stmt 0 view .LVU203
 773 0030 104A     		ldr	r2, .L51+4
 774 0032 1168     		ldr	r1, [r2]
 174:Core/Inc/lcd_stm32f0.c ****     GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 775              		.loc 2 174 18 view .LVU204
 776 0034 A023     		movs	r3, #160
 777 0036 DB02     		lsls	r3, r3, #11
 778 0038 0B43     		orrs	r3, r1
 779 003a 1360     		str	r3, [r2]
 175:Core/Inc/lcd_stm32f0.c **** 
 780              		.loc 2 175 5 is_stmt 1 view .LVU205
 175:Core/Inc/lcd_stm32f0.c **** 
 781              		.loc 2 175 10 is_stmt 0 view .LVU206
 782 003c 0E4A     		ldr	r2, .L51+8
 783 003e 1168     		ldr	r1, [r2]
 175:Core/Inc/lcd_stm32f0.c **** 
 784              		.loc 2 175 18 view .LVU207
 785 0040 A023     		movs	r3, #160
 786 0042 DB05     		lsls	r3, r3, #23
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 24


 787 0044 0B43     		orrs	r3, r1
 788 0046 1360     		str	r3, [r2]
 177:Core/Inc/lcd_stm32f0.c **** 
 789              		.loc 2 177 5 is_stmt 1 view .LVU208
 790 0048 0C48     		ldr	r0, .L51+12
 791 004a FFF7FEFF 		bl	delay
 792              	.LVL24:
 179:Core/Inc/lcd_stm32f0.c ****     lcd_command(FOURBIT_MODE);		// Set LCD into 4 bit mode
 793              		.loc 2 179 5 view .LVU209
 794 004e 3320     		movs	r0, #51
 795 0050 FFF7FEFF 		bl	lcd_command
 796              	.LVL25:
 180:Core/Inc/lcd_stm32f0.c ****     lcd_command(DISPLAY_ON);		// Turn display on and set up cursor
 797              		.loc 2 180 5 view .LVU210
 798 0054 3220     		movs	r0, #50
 799 0056 FFF7FEFF 		bl	lcd_command
 800              	.LVL26:
 181:Core/Inc/lcd_stm32f0.c ****     lcd_command(TWOLINE_MODE);		// Set up 2 lines and character size
 801              		.loc 2 181 5 view .LVU211
 802 005a 0C20     		movs	r0, #12
 803 005c FFF7FEFF 		bl	lcd_command
 804              	.LVL27:
 182:Core/Inc/lcd_stm32f0.c ****     lcd_command(CLEAR);			// Clear display
 805              		.loc 2 182 5 view .LVU212
 806 0060 2820     		movs	r0, #40
 807 0062 FFF7FEFF 		bl	lcd_command
 808              	.LVL28:
 183:Core/Inc/lcd_stm32f0.c **** }
 809              		.loc 2 183 5 view .LVU213
 810 0066 0120     		movs	r0, #1
 811 0068 FFF7FEFF 		bl	lcd_command
 812              	.LVL29:
 184:Core/Inc/lcd_stm32f0.c **** 
 813              		.loc 2 184 1 is_stmt 0 view .LVU214
 814              		@ sp needed
 815 006c 10BD     		pop	{r4, pc}
 816              	.L52:
 817 006e C046     		.align	2
 818              	.L51:
 819 0070 00100240 		.word	1073876992
 820 0074 00040048 		.word	1207960576
 821 0078 00080048 		.word	1207961600
 822 007c 30750000 		.word	30000
 823              		.cfi_endproc
 824              	.LFE44:
 826              		.section	.text.initTIM14,"ax",%progbits
 827              		.align	1
 828              		.global	initTIM14
 829              		.syntax unified
 830              		.code	16
 831              		.thumb_func
 833              	initTIM14:
 834              	.LFB50:
   1:Core/Src/main.c **** //********************************************************************
   2:Core/Src/main.c **** //*                    EEE2046F C template                           *
   3:Core/Src/main.c **** //*==================================================================*
   4:Core/Src/main.c **** //* WRITTEN BY: Sizwe Letanta   	                 		         *
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 25


   5:Core/Src/main.c **** //* DATE CREATED: 11/05/2023                                         *
   6:Core/Src/main.c **** //* MODIFIED:                                                        *
   7:Core/Src/main.c **** //*==================================================================*
   8:Core/Src/main.c **** //* PROGRAMMED IN: Visual Studio Code                                *
   9:Core/Src/main.c **** //* TARGET:        STM32F0                                           *
  10:Core/Src/main.c **** //*==================================================================*
  11:Core/Src/main.c **** //* DESCRIPTION:                                                     *
  12:Core/Src/main.c **** //*                                                                  *
  13:Core/Src/main.c **** //********************************************************************
  14:Core/Src/main.c **** // INCLUDE FILES
  15:Core/Src/main.c **** //====================================================================
  16:Core/Src/main.c **** #include <stdio.h>
  17:Core/Src/main.c **** #include <lcd_stm32f0.c>
  18:Core/Src/main.c **** #include "math.h"
  19:Core/Src/main.c **** #include "stm32f0xx.h"
  20:Core/Src/main.c **** //====================================================================
  21:Core/Src/main.c **** // GLOBAL CONSTANTS
  22:Core/Src/main.c **** //====================================================================
  23:Core/Src/main.c **** #define FALSE 0
  24:Core/Src/main.c **** #define TRUE 1
  25:Core/Src/main.c **** typedef uint8_t flag_t;
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** // Struct to store the lapped time
  28:Core/Src/main.c **** typedef struct {
  29:Core/Src/main.c **** 	uint8_t minutes;
  30:Core/Src/main.c **** 	uint8_t seconds;
  31:Core/Src/main.c **** 	uint8_t hundredths;
  32:Core/Src/main.c **** } time_struct;
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** //====================================================================
  35:Core/Src/main.c **** // GLOBAL VARIABLES
  36:Core/Src/main.c **** //====================================================================
  37:Core/Src/main.c **** char buff[16];	// To store the time displayed on the screen
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** // Flags for different modes
  40:Core/Src/main.c **** flag_t startFlag = FALSE;
  41:Core/Src/main.c **** flag_t lapFlag = FALSE;
  42:Core/Src/main.c **** flag_t stopFlag = FALSE;
  43:Core/Src/main.c **** flag_t resetFlag = TRUE;
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** // Current time is stored in these variables
  46:Core/Src/main.c **** uint8_t minutes = 0;
  47:Core/Src/main.c **** uint8_t seconds = 0;
  48:Core/Src/main.c **** uint8_t hundredths = 0;
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** time_struct lapped_time = {0, 0, 0};
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** //====================================================================
  53:Core/Src/main.c **** // FUNCTION DECLARATIONS
  54:Core/Src/main.c **** //====================================================================
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /**
  57:Core/Src/main.c ****  * Function to initialise the TIM14 register
  58:Core/Src/main.c ****  */
  59:Core/Src/main.c **** void initTIM14(void);
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /**
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 26


  62:Core/Src/main.c ****  * Function to handle the TIM14 interrupts by incrementing the time
  63:Core/Src/main.c ****  */
  64:Core/Src/main.c **** void TIM14_IRQHandler(void);
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** /**
  67:Core/Src/main.c ****  * Initialises the GPIO pins to allow for the mode LEDs and the different
  68:Core/Src/main.c ****  * buttons to function
  69:Core/Src/main.c ****  */
  70:Core/Src/main.c **** void initGPIO(void);
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** /**
  73:Core/Src/main.c ****  * function to display time and messages to the LCD and show the mode with the LEDs
  74:Core/Src/main.c ****  */
  75:Core/Src/main.c **** void display(void);
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** /**
  78:Core/Src/main.c ****  * Function to check which button has been clicked and set the flags accordinlgy
  79:Core/Src/main.c ****  */
  80:Core/Src/main.c **** void checkPB(void);
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** /**
  83:Core/Src/main.c ****  * Function to convert the time to binary coded decimal and convert the digits to
  84:Core/Src/main.c ****  * ASCII so that they can be displayed on the LCD
  85:Core/Src/main.c ****  */
  86:Core/Src/main.c **** void convert2BCDASCII(const uint8_t min, const uint8_t sec, const uint8_t hund, char* resultPtr);
  87:Core/Src/main.c **** 
  88:Core/Src/main.c **** //====================================================================
  89:Core/Src/main.c **** // MAIN FUNCTION
  90:Core/Src/main.c **** //====================================================================
  91:Core/Src/main.c **** int main(void) {
  92:Core/Src/main.c **** 	initGPIO();	  // Initialise the GPIO pins
  93:Core/Src/main.c **** 	initTIM14();  // Initialise the timer
  94:Core/Src/main.c **** 	init_LCD();	  // Initialise the LCD
  95:Core/Src/main.c **** 	while (1) {
  96:Core/Src/main.c **** 		checkPB();			 // Check the previous button press
  97:Core/Src/main.c **** 		lcd_command(CLEAR);	 // clear previous display
  98:Core/Src/main.c **** 		// char val[4];
  99:Core/Src/main.c **** 		
 100:Core/Src/main.c **** 		// sprintf( buff,"%lu", GPIOA->IDR);
 101:Core/Src/main.c **** 		display();
 102:Core/Src/main.c **** 		// lcd_putstring(buff);
 103:Core/Src/main.c **** 		delay(10000);  // Delay to make the time easier to read on the LCD
 104:Core/Src/main.c **** 	}
 105:Core/Src/main.c **** 
 106:Core/Src/main.c **** }  // End of main
 107:Core/Src/main.c **** 
 108:Core/Src/main.c **** //====================================================================
 109:Core/Src/main.c **** // FUNCTION DEFINITIONS
 110:Core/Src/main.c **** //====================================================================
 111:Core/Src/main.c **** void initTIM14(void) {
 835              		.loc 1 111 22 is_stmt 1 view -0
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 0
 838              		@ frame_needed = 0, uses_anonymous_args = 0
 839              		@ link register save eliminated.
 112:Core/Src/main.c **** 	// Calculate the prescaler and ARR values
 113:Core/Src/main.c **** 	int presc = 8;
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 27


 840              		.loc 1 113 2 view .LVU216
 841              	.LVL30:
 114:Core/Src/main.c **** 	int arr = 59999;
 842              		.loc 1 114 2 view .LVU217
 115:Core/Src/main.c **** 
 116:Core/Src/main.c **** 	// Initialise the timer
 117:Core/Src/main.c **** 	RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;  // Enable clock source register
 843              		.loc 1 117 2 view .LVU218
 844              		.loc 1 117 5 is_stmt 0 view .LVU219
 845 0000 0B4A     		ldr	r2, .L54
 846 0002 D169     		ldr	r1, [r2, #28]
 847              		.loc 1 117 15 view .LVU220
 848 0004 8023     		movs	r3, #128
 849 0006 5B00     		lsls	r3, r3, #1
 850 0008 0B43     		orrs	r3, r1
 851 000a D361     		str	r3, [r2, #28]
 118:Core/Src/main.c **** 	TIM14->PSC |= presc;				  // Set prescaler value
 852              		.loc 1 118 2 is_stmt 1 view .LVU221
 853              		.loc 1 118 7 is_stmt 0 view .LVU222
 854 000c 094B     		ldr	r3, .L54+4
 855 000e 9A6A     		ldr	r2, [r3, #40]
 856              		.loc 1 118 13 view .LVU223
 857 0010 0821     		movs	r1, #8
 858 0012 0A43     		orrs	r2, r1
 859 0014 9A62     		str	r2, [r3, #40]
 119:Core/Src/main.c **** 	TIM14->ARR |= arr;					  // Set the Auto reload register value
 860              		.loc 1 119 2 is_stmt 1 view .LVU224
 861              		.loc 1 119 7 is_stmt 0 view .LVU225
 862 0016 D96A     		ldr	r1, [r3, #44]
 863              		.loc 1 119 13 view .LVU226
 864 0018 074A     		ldr	r2, .L54+8
 865 001a 0A43     		orrs	r2, r1
 866 001c DA62     		str	r2, [r3, #44]
 120:Core/Src/main.c **** 	TIM14->DIER |= TIM_DIER_UIE;		  // Enable tim14 interrupts
 867              		.loc 1 120 2 is_stmt 1 view .LVU227
 868              		.loc 1 120 7 is_stmt 0 view .LVU228
 869 001e DA68     		ldr	r2, [r3, #12]
 870              		.loc 1 120 14 view .LVU229
 871 0020 0121     		movs	r1, #1
 872 0022 0A43     		orrs	r2, r1
 873 0024 DA60     		str	r2, [r3, #12]
 121:Core/Src/main.c **** 	TIM14->CR1 |= TIM_CR1_CEN;			  // Start the timer
 874              		.loc 1 121 2 is_stmt 1 view .LVU230
 875              		.loc 1 121 7 is_stmt 0 view .LVU231
 876 0026 1A68     		ldr	r2, [r3]
 877              		.loc 1 121 13 view .LVU232
 878 0028 0A43     		orrs	r2, r1
 879 002a 1A60     		str	r2, [r3]
 122:Core/Src/main.c **** }
 880              		.loc 1 122 1 view .LVU233
 881              		@ sp needed
 882 002c 7047     		bx	lr
 883              	.L55:
 884 002e C046     		.align	2
 885              	.L54:
 886 0030 00100240 		.word	1073876992
 887 0034 00200040 		.word	1073750016
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 28


 888 0038 5FEA0000 		.word	59999
 889              		.cfi_endproc
 890              	.LFE50:
 892              		.section	.text.initGPIO,"ax",%progbits
 893              		.align	1
 894              		.global	initGPIO
 895              		.syntax unified
 896              		.code	16
 897              		.thumb_func
 899              	initGPIO:
 900              	.LFB51:
 123:Core/Src/main.c **** 
 124:Core/Src/main.c **** void initGPIO(void) {
 901              		.loc 1 124 21 is_stmt 1 view -0
 902              		.cfi_startproc
 903              		@ args = 0, pretend = 0, frame = 0
 904              		@ frame_needed = 0, uses_anonymous_args = 0
 905 0000 10B5     		push	{r4, lr}
 906              		.cfi_def_cfa_offset 8
 907              		.cfi_offset 4, -8
 908              		.cfi_offset 14, -4
 125:Core/Src/main.c **** 	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;																   // Connects Clock Signal
 909              		.loc 1 125 2 view .LVU235
 910              		.loc 1 125 5 is_stmt 0 view .LVU236
 911 0002 144A     		ldr	r2, .L57
 912 0004 5169     		ldr	r1, [r2, #20]
 913              		.loc 1 125 14 view .LVU237
 914 0006 8023     		movs	r3, #128
 915 0008 9B02     		lsls	r3, r3, #10
 916 000a 0B43     		orrs	r3, r1
 917 000c 5361     		str	r3, [r2, #20]
 126:Core/Src/main.c **** 	GPIOA->MODER &= ~(GPIO_MODER_MODER0 | GPIO_MODER_MODER1 | GPIO_MODER_MODER2 | GPIO_MODER_MODER3); 
 918              		.loc 1 126 2 is_stmt 1 view .LVU238
 919              		.loc 1 126 7 is_stmt 0 view .LVU239
 920 000e 9023     		movs	r3, #144
 921 0010 DB05     		lsls	r3, r3, #23
 922 0012 1968     		ldr	r1, [r3]
 923              		.loc 1 126 15 view .LVU240
 924 0014 FF20     		movs	r0, #255
 925 0016 8143     		bics	r1, r0
 926 0018 1960     		str	r1, [r3]
 127:Core/Src/main.c **** 
 128:Core/Src/main.c **** 	GPIOA->MODER |= GPIO_MODER_MODER7_1;
 927              		.loc 1 128 2 is_stmt 1 view .LVU241
 928              		.loc 1 128 7 is_stmt 0 view .LVU242
 929 001a 1868     		ldr	r0, [r3]
 930              		.loc 1 128 15 view .LVU243
 931 001c 8021     		movs	r1, #128
 932 001e 0902     		lsls	r1, r1, #8
 933 0020 0143     		orrs	r1, r0
 934 0022 1960     		str	r1, [r3]
 129:Core/Src/main.c **** 	GPIOA->OTYPER |= GPIO_OTYPER_OT_7;
 935              		.loc 1 129 2 is_stmt 1 view .LVU244
 936              		.loc 1 129 7 is_stmt 0 view .LVU245
 937 0024 5968     		ldr	r1, [r3, #4]
 938              		.loc 1 129 16 view .LVU246
 939 0026 8020     		movs	r0, #128
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 29


 940 0028 0143     		orrs	r1, r0
 941 002a 5960     		str	r1, [r3, #4]
 130:Core/Src/main.c **** 
 131:Core/Src/main.c **** 	// Enables Pull Up resistors//0x00000055;
 132:Core/Src/main.c **** 	GPIOA->PUPDR |= (GPIO_PUPDR_PUPDR0_0 | GPIO_PUPDR_PUPDR1_0 | GPIO_PUPDR_PUPDR2_0 | GPIO_PUPDR_PUPD
 942              		.loc 1 132 2 is_stmt 1 view .LVU247
 943              		.loc 1 132 7 is_stmt 0 view .LVU248
 944 002c D968     		ldr	r1, [r3, #12]
 945              		.loc 1 132 15 view .LVU249
 946 002e 2B38     		subs	r0, r0, #43
 947 0030 0143     		orrs	r1, r0
 948 0032 D960     		str	r1, [r3, #12]
 133:Core/Src/main.c **** 
 134:Core/Src/main.c **** 	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR0_1 | GPIO_PUPDR_PUPDR1_1 | GPIO_PUPDR_PUPDR2_1 | GPIO_PUPDR_PUP
 949              		.loc 1 134 2 is_stmt 1 view .LVU250
 950              		.loc 1 134 7 is_stmt 0 view .LVU251
 951 0034 D968     		ldr	r1, [r3, #12]
 952              		.loc 1 134 15 view .LVU252
 953 0036 AA24     		movs	r4, #170
 954 0038 A143     		bics	r1, r4
 955 003a D960     		str	r1, [r3, #12]
 135:Core/Src/main.c **** 
 136:Core/Src/main.c **** 	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;	// Connects Clock Signal
 956              		.loc 1 136 2 is_stmt 1 view .LVU253
 957              		.loc 1 136 5 is_stmt 0 view .LVU254
 958 003c 5169     		ldr	r1, [r2, #20]
 959              		.loc 1 136 14 view .LVU255
 960 003e 8023     		movs	r3, #128
 961 0040 DB02     		lsls	r3, r3, #11
 962 0042 0B43     		orrs	r3, r1
 963 0044 5361     		str	r3, [r2, #20]
 137:Core/Src/main.c **** 
 138:Core/Src/main.c **** 	// Configures LEDs to output modes
 139:Core/Src/main.c **** 	GPIOB->MODER |= (GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0 | GPIO_MODER_MODER2_0 | GPIO_MODER_MODE
 964              		.loc 1 139 2 is_stmt 1 view .LVU256
 965              		.loc 1 139 7 is_stmt 0 view .LVU257
 966 0046 044B     		ldr	r3, .L57+4
 967 0048 1A68     		ldr	r2, [r3]
 968              		.loc 1 139 15 view .LVU258
 969 004a 0243     		orrs	r2, r0
 970 004c 1A60     		str	r2, [r3]
 140:Core/Src/main.c **** 
 141:Core/Src/main.c **** 	GPIOB->ODR = 0x00000000;  // Ensures LEDs are off
 971              		.loc 1 141 2 is_stmt 1 view .LVU259
 972              		.loc 1 141 13 is_stmt 0 view .LVU260
 973 004e 0022     		movs	r2, #0
 974 0050 5A61     		str	r2, [r3, #20]
 142:Core/Src/main.c **** }
 975              		.loc 1 142 1 view .LVU261
 976              		@ sp needed
 977 0052 10BD     		pop	{r4, pc}
 978              	.L58:
 979              		.align	2
 980              	.L57:
 981 0054 00100240 		.word	1073876992
 982 0058 00040048 		.word	1207960576
 983              		.cfi_endproc
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 30


 984              	.LFE51:
 986              		.section	.text.TIM14_IRQHandler,"ax",%progbits
 987              		.align	1
 988              		.global	TIM14_IRQHandler
 989              		.syntax unified
 990              		.code	16
 991              		.thumb_func
 993              	TIM14_IRQHandler:
 994              	.LFB52:
 143:Core/Src/main.c **** 
 144:Core/Src/main.c **** void TIM14_IRQHandler(void) {
 995              		.loc 1 144 29 is_stmt 1 view -0
 996              		.cfi_startproc
 997              		@ args = 0, pretend = 0, frame = 0
 998              		@ frame_needed = 0, uses_anonymous_args = 0
 999              		@ link register save eliminated.
 145:Core/Src/main.c **** 	TIM14->SR &= ~TIM_SR_UIF;  // Clear the flag
 1000              		.loc 1 145 2 view .LVU263
 1001              		.loc 1 145 7 is_stmt 0 view .LVU264
 1002 0000 104A     		ldr	r2, .L64
 1003 0002 1369     		ldr	r3, [r2, #16]
 1004              		.loc 1 145 12 view .LVU265
 1005 0004 0121     		movs	r1, #1
 1006 0006 8B43     		bics	r3, r1
 1007 0008 1361     		str	r3, [r2, #16]
 146:Core/Src/main.c **** 	hundredths += 10;		   // Increment the hundredths
 1008              		.loc 1 146 2 is_stmt 1 view .LVU266
 1009              		.loc 1 146 13 is_stmt 0 view .LVU267
 1010 000a 0F4A     		ldr	r2, .L64+4
 1011 000c 1378     		ldrb	r3, [r2]
 1012 000e 0A33     		adds	r3, r3, #10
 1013 0010 DBB2     		uxtb	r3, r3
 1014 0012 1370     		strb	r3, [r2]
 147:Core/Src/main.c **** 
 148:Core/Src/main.c **** 	// calculate the seconds and minutes
 149:Core/Src/main.c **** 	if (hundredths == 100) {
 1015              		.loc 1 149 2 is_stmt 1 view .LVU268
 1016              		.loc 1 149 5 is_stmt 0 view .LVU269
 1017 0014 642B     		cmp	r3, #100
 1018 0016 04D0     		beq	.L62
 1019              	.L60:
 150:Core/Src/main.c **** 		hundredths = 0;
 151:Core/Src/main.c **** 		++seconds;
 152:Core/Src/main.c **** 	}
 153:Core/Src/main.c **** 	if (seconds == 60) {
 1020              		.loc 1 153 2 is_stmt 1 view .LVU270
 1021              		.loc 1 153 14 is_stmt 0 view .LVU271
 1022 0018 0C4B     		ldr	r3, .L64+8
 1023 001a 1B78     		ldrb	r3, [r3]
 1024              		.loc 1 153 5 view .LVU272
 1025 001c 3C2B     		cmp	r3, #60
 1026 001e 08D0     		beq	.L63
 1027              	.L59:
 154:Core/Src/main.c **** 		seconds = 0;
 155:Core/Src/main.c **** 		++minutes;
 156:Core/Src/main.c **** 	}
 157:Core/Src/main.c **** }
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 31


 1028              		.loc 1 157 1 view .LVU273
 1029              		@ sp needed
 1030 0020 7047     		bx	lr
 1031              	.L62:
 150:Core/Src/main.c **** 		hundredths = 0;
 1032              		.loc 1 150 3 is_stmt 1 view .LVU274
 150:Core/Src/main.c **** 		hundredths = 0;
 1033              		.loc 1 150 14 is_stmt 0 view .LVU275
 1034 0022 1300     		movs	r3, r2
 1035 0024 0022     		movs	r2, #0
 1036 0026 1A70     		strb	r2, [r3]
 151:Core/Src/main.c **** 	}
 1037              		.loc 1 151 3 is_stmt 1 view .LVU276
 1038 0028 084A     		ldr	r2, .L64+8
 1039 002a 1378     		ldrb	r3, [r2]
 1040 002c 0133     		adds	r3, r3, #1
 1041 002e 1370     		strb	r3, [r2]
 1042 0030 F2E7     		b	.L60
 1043              	.L63:
 154:Core/Src/main.c **** 		seconds = 0;
 1044              		.loc 1 154 3 view .LVU277
 154:Core/Src/main.c **** 		seconds = 0;
 1045              		.loc 1 154 11 is_stmt 0 view .LVU278
 1046 0032 064B     		ldr	r3, .L64+8
 1047 0034 0022     		movs	r2, #0
 1048 0036 1A70     		strb	r2, [r3]
 155:Core/Src/main.c **** 	}
 1049              		.loc 1 155 3 is_stmt 1 view .LVU279
 1050 0038 054A     		ldr	r2, .L64+12
 1051 003a 1378     		ldrb	r3, [r2]
 1052 003c 0133     		adds	r3, r3, #1
 1053 003e 1370     		strb	r3, [r2]
 1054              		.loc 1 157 1 is_stmt 0 view .LVU280
 1055 0040 EEE7     		b	.L59
 1056              	.L65:
 1057 0042 C046     		.align	2
 1058              	.L64:
 1059 0044 00200040 		.word	1073750016
 1060 0048 00000000 		.word	hundredths
 1061 004c 00000000 		.word	seconds
 1062 0050 00000000 		.word	minutes
 1063              		.cfi_endproc
 1064              	.LFE52:
 1066              		.global	__aeabi_uidiv
 1067              		.global	__aeabi_uidivmod
 1068              		.section	.text.convert2BCDASCII,"ax",%progbits
 1069              		.align	1
 1070              		.global	convert2BCDASCII
 1071              		.syntax unified
 1072              		.code	16
 1073              		.thumb_func
 1075              	convert2BCDASCII:
 1076              	.LVL31:
 1077              	.LFB53:
 158:Core/Src/main.c **** 
 159:Core/Src/main.c **** void convert2BCDASCII(const uint8_t min, const uint8_t sec, const uint8_t hund, char* resultPtr) {
 1078              		.loc 1 159 98 is_stmt 1 view -0
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 32


 1079              		.cfi_startproc
 1080              		@ args = 0, pretend = 0, frame = 0
 1081              		@ frame_needed = 0, uses_anonymous_args = 0
 1082              		.loc 1 159 98 is_stmt 0 view .LVU282
 1083 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1084              		.cfi_def_cfa_offset 20
 1085              		.cfi_offset 4, -20
 1086              		.cfi_offset 5, -16
 1087              		.cfi_offset 6, -12
 1088              		.cfi_offset 7, -8
 1089              		.cfi_offset 14, -4
 1090 0002 D646     		mov	lr, r10
 1091 0004 4F46     		mov	r7, r9
 1092 0006 4646     		mov	r6, r8
 1093 0008 C0B5     		push	{r6, r7, lr}
 1094              		.cfi_def_cfa_offset 32
 1095              		.cfi_offset 8, -32
 1096              		.cfi_offset 9, -28
 1097              		.cfi_offset 10, -24
 1098 000a 0600     		movs	r6, r0
 1099 000c 0D00     		movs	r5, r1
 1100 000e 9146     		mov	r9, r2
 1101 0010 1C00     		movs	r4, r3
 160:Core/Src/main.c **** 	uint8_t bc_min1 = min / 10;	 // Digit 1
 1102              		.loc 1 160 2 is_stmt 1 view .LVU283
 1103              		.loc 1 160 10 is_stmt 0 view .LVU284
 1104 0012 0A21     		movs	r1, #10
 1105              	.LVL32:
 1106              		.loc 1 160 10 view .LVU285
 1107 0014 FFF7FEFF 		bl	__aeabi_uidiv
 1108              	.LVL33:
 1109              		.loc 1 160 10 view .LVU286
 1110 0018 C3B2     		uxtb	r3, r0
 1111 001a 9846     		mov	r8, r3
 1112              	.LVL34:
 161:Core/Src/main.c **** 	uint8_t bc_min0 = min % 10;	 // Digit 0
 1113              		.loc 1 161 2 is_stmt 1 view .LVU287
 1114              		.loc 1 161 10 is_stmt 0 view .LVU288
 1115 001c 0A21     		movs	r1, #10
 1116 001e 3000     		movs	r0, r6
 1117 0020 FFF7FEFF 		bl	__aeabi_uidivmod
 1118              	.LVL35:
 1119 0024 CFB2     		uxtb	r7, r1
 1120              	.LVL36:
 162:Core/Src/main.c **** 
 163:Core/Src/main.c **** 	uint8_t bc_sec1 = sec / 10;	 // Digit 1
 1121              		.loc 1 163 2 is_stmt 1 view .LVU289
 1122              		.loc 1 163 10 is_stmt 0 view .LVU290
 1123 0026 0A21     		movs	r1, #10
 1124 0028 2800     		movs	r0, r5
 1125 002a FFF7FEFF 		bl	__aeabi_uidiv
 1126              	.LVL37:
 1127 002e C6B2     		uxtb	r6, r0
 1128              	.LVL38:
 164:Core/Src/main.c **** 	uint8_t bc_sec0 = sec % 10;	 // Digit 0
 1129              		.loc 1 164 2 is_stmt 1 view .LVU291
 1130              		.loc 1 164 10 is_stmt 0 view .LVU292
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 33


 1131 0030 0A21     		movs	r1, #10
 1132 0032 2800     		movs	r0, r5
 1133 0034 FFF7FEFF 		bl	__aeabi_uidivmod
 1134              	.LVL39:
 1135 0038 CBB2     		uxtb	r3, r1
 1136 003a 9A46     		mov	r10, r3
 1137              	.LVL40:
 165:Core/Src/main.c **** 
 166:Core/Src/main.c **** 	uint8_t bc_hund1 = hund / 10;  // Digit 1
 1138              		.loc 1 166 2 is_stmt 1 view .LVU293
 1139              		.loc 1 166 10 is_stmt 0 view .LVU294
 1140 003c 0A21     		movs	r1, #10
 1141 003e 4846     		mov	r0, r9
 1142 0040 FFF7FEFF 		bl	__aeabi_uidiv
 1143              	.LVL41:
 1144 0044 C5B2     		uxtb	r5, r0
 1145              	.LVL42:
 167:Core/Src/main.c **** 	uint8_t bc_hund0 = hund % 10;  // Digit 0
 1146              		.loc 1 167 2 is_stmt 1 view .LVU295
 1147              		.loc 1 167 10 is_stmt 0 view .LVU296
 1148 0046 0A21     		movs	r1, #10
 1149 0048 4846     		mov	r0, r9
 1150 004a FFF7FEFF 		bl	__aeabi_uidivmod
 1151              	.LVL43:
 1152 004e C9B2     		uxtb	r1, r1
 1153              	.LVL44:
 168:Core/Src/main.c **** 
 169:Core/Src/main.c **** 	// convert to asciii
 170:Core/Src/main.c **** 	resultPtr[0] = bc_min1 + 48;
 1154              		.loc 1 170 2 is_stmt 1 view .LVU297
 1155              		.loc 1 170 25 is_stmt 0 view .LVU298
 1156 0050 4346     		mov	r3, r8
 1157 0052 3033     		adds	r3, r3, #48
 1158              		.loc 1 170 15 view .LVU299
 1159 0054 2370     		strb	r3, [r4]
 171:Core/Src/main.c **** 	resultPtr[1] = bc_min0 + 48;
 1160              		.loc 1 171 2 is_stmt 1 view .LVU300
 1161              		.loc 1 171 25 is_stmt 0 view .LVU301
 1162 0056 3037     		adds	r7, r7, #48
 1163              	.LVL45:
 1164              		.loc 1 171 15 view .LVU302
 1165 0058 6770     		strb	r7, [r4, #1]
 172:Core/Src/main.c **** 	resultPtr[2] = ':';
 1166              		.loc 1 172 2 is_stmt 1 view .LVU303
 1167              		.loc 1 172 15 is_stmt 0 view .LVU304
 1168 005a 3A23     		movs	r3, #58
 1169 005c A370     		strb	r3, [r4, #2]
 173:Core/Src/main.c **** 	resultPtr[3] = bc_sec1 + 48;
 1170              		.loc 1 173 2 is_stmt 1 view .LVU305
 1171              		.loc 1 173 25 is_stmt 0 view .LVU306
 1172 005e 3036     		adds	r6, r6, #48
 1173              	.LVL46:
 1174              		.loc 1 173 15 view .LVU307
 1175 0060 E670     		strb	r6, [r4, #3]
 174:Core/Src/main.c **** 	resultPtr[4] = bc_sec0 + 48;
 1176              		.loc 1 174 2 is_stmt 1 view .LVU308
 1177              		.loc 1 174 25 is_stmt 0 view .LVU309
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 34


 1178 0062 5346     		mov	r3, r10
 1179 0064 3033     		adds	r3, r3, #48
 1180              		.loc 1 174 15 view .LVU310
 1181 0066 2371     		strb	r3, [r4, #4]
 175:Core/Src/main.c **** 	resultPtr[5] = '.';
 1182              		.loc 1 175 2 is_stmt 1 view .LVU311
 1183              		.loc 1 175 15 is_stmt 0 view .LVU312
 1184 0068 2E23     		movs	r3, #46
 1185 006a 6371     		strb	r3, [r4, #5]
 176:Core/Src/main.c **** 	resultPtr[6] = bc_hund1 + 48;
 1186              		.loc 1 176 2 is_stmt 1 view .LVU313
 1187              		.loc 1 176 26 is_stmt 0 view .LVU314
 1188 006c 3035     		adds	r5, r5, #48
 1189              	.LVL47:
 1190              		.loc 1 176 15 view .LVU315
 1191 006e A571     		strb	r5, [r4, #6]
 177:Core/Src/main.c **** 	resultPtr[7] = bc_hund0 + 48;
 1192              		.loc 1 177 2 is_stmt 1 view .LVU316
 1193              		.loc 1 177 26 is_stmt 0 view .LVU317
 1194 0070 3031     		adds	r1, r1, #48
 1195              	.LVL48:
 1196              		.loc 1 177 15 view .LVU318
 1197 0072 E171     		strb	r1, [r4, #7]
 178:Core/Src/main.c **** 	resultPtr[8] = '\0';
 1198              		.loc 1 178 2 is_stmt 1 view .LVU319
 1199              		.loc 1 178 15 is_stmt 0 view .LVU320
 1200 0074 0023     		movs	r3, #0
 1201 0076 2372     		strb	r3, [r4, #8]
 179:Core/Src/main.c **** }
 1202              		.loc 1 179 1 view .LVU321
 1203              		@ sp needed
 1204              	.LVL49:
 1205              	.LVL50:
 1206              	.LVL51:
 1207              	.LVL52:
 1208              	.LVL53:
 1209              	.LVL54:
 1210              		.loc 1 179 1 view .LVU322
 1211 0078 E0BC     		pop	{r5, r6, r7}
 1212 007a BA46     		mov	r10, r7
 1213 007c B146     		mov	r9, r6
 1214 007e A846     		mov	r8, r5
 1215 0080 F0BD     		pop	{r4, r5, r6, r7, pc}
 1216              		.cfi_endproc
 1217              	.LFE53:
 1219              		.section	.rodata.display.str1.4,"aMS",%progbits,1
 1220              		.align	2
 1221              	.LC7:
 1222 0000 53746F70 		.ascii	"Stopwatch\000"
 1222      77617463 
 1222      6800
 1223 000a 0000     		.align	2
 1224              	.LC9:
 1225 000c 50726573 		.ascii	"Press SW0...\000"
 1225      73205357 
 1225      302E2E2E 
 1225      00
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 35


 1226 0019 000000   		.align	2
 1227              	.LC11:
 1228 001c 54696D65 		.ascii	"Time\000"
 1228      00
 1229              		.section	.text.display,"ax",%progbits
 1230              		.align	1
 1231              		.global	display
 1232              		.syntax unified
 1233              		.code	16
 1234              		.thumb_func
 1236              	display:
 1237              	.LFB54:
 180:Core/Src/main.c **** 
 181:Core/Src/main.c **** void display(void) {
 1238              		.loc 1 181 20 is_stmt 1 view -0
 1239              		.cfi_startproc
 1240              		@ args = 0, pretend = 0, frame = 0
 1241              		@ frame_needed = 0, uses_anonymous_args = 0
 1242 0000 10B5     		push	{r4, lr}
 1243              		.cfi_def_cfa_offset 8
 1244              		.cfi_offset 4, -8
 1245              		.cfi_offset 14, -4
 182:Core/Src/main.c **** 	// Reset button pressed
 183:Core/Src/main.c **** 	if (!startFlag && !lapFlag && !stopFlag && resetFlag) {
 1246              		.loc 1 183 2 view .LVU324
 1247              		.loc 1 183 6 is_stmt 0 view .LVU325
 1248 0002 484B     		ldr	r3, .L76
 1249 0004 1B78     		ldrb	r3, [r3]
 1250              		.loc 1 183 5 view .LVU326
 1251 0006 002B     		cmp	r3, #0
 1252 0008 0BD1     		bne	.L68
 1253              		.loc 1 183 20 discriminator 1 view .LVU327
 1254 000a 474B     		ldr	r3, .L76+4
 1255 000c 1B78     		ldrb	r3, [r3]
 1256              		.loc 1 183 17 discriminator 1 view .LVU328
 1257 000e 002B     		cmp	r3, #0
 1258 0010 07D1     		bne	.L68
 1259              		.loc 1 183 32 discriminator 2 view .LVU329
 1260 0012 464B     		ldr	r3, .L76+8
 1261 0014 1B78     		ldrb	r3, [r3]
 1262              		.loc 1 183 29 discriminator 2 view .LVU330
 1263 0016 002B     		cmp	r3, #0
 1264 0018 03D1     		bne	.L68
 1265              		.loc 1 183 42 discriminator 3 view .LVU331
 1266 001a 454B     		ldr	r3, .L76+12
 1267 001c 1B78     		ldrb	r3, [r3]
 1268 001e 002B     		cmp	r3, #0
 1269 0020 30D1     		bne	.L72
 1270              	.L68:
 184:Core/Src/main.c **** 		lcd_putstring("Stopwatch");
 185:Core/Src/main.c **** 		lcd_command(LINE_TWO);
 186:Core/Src/main.c **** 		lcd_putstring("Press SW0...");
 187:Core/Src/main.c **** 		GPIOB->ODR = 1 << 3;  // LED 3 on
 188:Core/Src/main.c **** 	}
 189:Core/Src/main.c **** 
 190:Core/Src/main.c **** 	// Start button pressed
 191:Core/Src/main.c **** 	if (startFlag && !lapFlag && !stopFlag && !resetFlag) {
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 36


 1271              		.loc 1 191 2 is_stmt 1 view .LVU332
 1272              		.loc 1 191 6 is_stmt 0 view .LVU333
 1273 0022 404B     		ldr	r3, .L76
 1274 0024 1B78     		ldrb	r3, [r3]
 1275              		.loc 1 191 5 view .LVU334
 1276 0026 002B     		cmp	r3, #0
 1277 0028 0BD0     		beq	.L69
 1278              		.loc 1 191 19 discriminator 1 view .LVU335
 1279 002a 3F4B     		ldr	r3, .L76+4
 1280 002c 1B78     		ldrb	r3, [r3]
 1281              		.loc 1 191 16 discriminator 1 view .LVU336
 1282 002e 002B     		cmp	r3, #0
 1283 0030 07D1     		bne	.L69
 1284              		.loc 1 191 31 discriminator 2 view .LVU337
 1285 0032 3E4B     		ldr	r3, .L76+8
 1286 0034 1B78     		ldrb	r3, [r3]
 1287              		.loc 1 191 28 discriminator 2 view .LVU338
 1288 0036 002B     		cmp	r3, #0
 1289 0038 03D1     		bne	.L69
 1290              		.loc 1 191 44 discriminator 3 view .LVU339
 1291 003a 3D4B     		ldr	r3, .L76+12
 1292 003c 1B78     		ldrb	r3, [r3]
 1293              		.loc 1 191 41 discriminator 3 view .LVU340
 1294 003e 002B     		cmp	r3, #0
 1295 0040 2DD0     		beq	.L73
 1296              	.L69:
 192:Core/Src/main.c **** 		lcd_putstring("Time");
 193:Core/Src/main.c **** 		lcd_command(LINE_TWO);
 194:Core/Src/main.c **** 		convert2BCDASCII(minutes, seconds, hundredths, buff);
 195:Core/Src/main.c **** 		lcd_putstring(buff);
 196:Core/Src/main.c **** 		GPIOB->ODR = 1 << 0;  // Set LED0
 197:Core/Src/main.c **** 	}
 198:Core/Src/main.c **** 
 199:Core/Src/main.c **** 	// Lap button pressed
 200:Core/Src/main.c **** 	if (startFlag && lapFlag && !stopFlag && !resetFlag) {
 1297              		.loc 1 200 2 is_stmt 1 view .LVU341
 1298              		.loc 1 200 6 is_stmt 0 view .LVU342
 1299 0042 384B     		ldr	r3, .L76
 1300 0044 1B78     		ldrb	r3, [r3]
 1301              		.loc 1 200 5 view .LVU343
 1302 0046 002B     		cmp	r3, #0
 1303 0048 0BD0     		beq	.L70
 1304              		.loc 1 200 16 discriminator 1 view .LVU344
 1305 004a 374B     		ldr	r3, .L76+4
 1306 004c 1B78     		ldrb	r3, [r3]
 1307 004e 002B     		cmp	r3, #0
 1308 0050 07D0     		beq	.L70
 1309              		.loc 1 200 30 discriminator 2 view .LVU345
 1310 0052 364B     		ldr	r3, .L76+8
 1311 0054 1B78     		ldrb	r3, [r3]
 1312              		.loc 1 200 27 discriminator 2 view .LVU346
 1313 0056 002B     		cmp	r3, #0
 1314 0058 03D1     		bne	.L70
 1315              		.loc 1 200 43 discriminator 3 view .LVU347
 1316 005a 354B     		ldr	r3, .L76+12
 1317 005c 1B78     		ldrb	r3, [r3]
 1318              		.loc 1 200 40 discriminator 3 view .LVU348
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 37


 1319 005e 002B     		cmp	r3, #0
 1320 0060 34D0     		beq	.L74
 1321              	.L70:
 201:Core/Src/main.c **** 		lcd_putstring("Time");
 202:Core/Src/main.c **** 		lcd_command(LINE_TWO);
 203:Core/Src/main.c **** 		convert2BCDASCII(lapped_time.minutes, lapped_time.seconds, lapped_time.hundredths, buff);  // Dis
 204:Core/Src/main.c **** 		lcd_putstring(buff);
 205:Core/Src/main.c **** 		GPIOB->ODR = 1 << 1;  // Set LED1
 206:Core/Src/main.c **** 	}
 207:Core/Src/main.c **** 
 208:Core/Src/main.c **** 	// Stop button pressed
 209:Core/Src/main.c **** 	if (startFlag && !lapFlag && stopFlag && !resetFlag) {
 1322              		.loc 1 209 2 is_stmt 1 view .LVU349
 1323              		.loc 1 209 6 is_stmt 0 view .LVU350
 1324 0062 304B     		ldr	r3, .L76
 1325 0064 1B78     		ldrb	r3, [r3]
 1326              		.loc 1 209 5 view .LVU351
 1327 0066 002B     		cmp	r3, #0
 1328 0068 0BD0     		beq	.L67
 1329              		.loc 1 209 19 discriminator 1 view .LVU352
 1330 006a 2F4B     		ldr	r3, .L76+4
 1331 006c 1B78     		ldrb	r3, [r3]
 1332              		.loc 1 209 16 discriminator 1 view .LVU353
 1333 006e 002B     		cmp	r3, #0
 1334 0070 07D1     		bne	.L67
 1335              		.loc 1 209 28 discriminator 2 view .LVU354
 1336 0072 2E4B     		ldr	r3, .L76+8
 1337 0074 1B78     		ldrb	r3, [r3]
 1338 0076 002B     		cmp	r3, #0
 1339 0078 03D0     		beq	.L67
 1340              		.loc 1 209 43 discriminator 3 view .LVU355
 1341 007a 2D4B     		ldr	r3, .L76+12
 1342 007c 1B78     		ldrb	r3, [r3]
 1343              		.loc 1 209 40 discriminator 3 view .LVU356
 1344 007e 002B     		cmp	r3, #0
 1345 0080 39D0     		beq	.L75
 1346              	.L67:
 210:Core/Src/main.c **** 		lcd_putstring("Time");
 211:Core/Src/main.c **** 		lcd_command(LINE_TWO);
 212:Core/Src/main.c **** 		convert2BCDASCII(minutes, seconds, hundredths, buff);
 213:Core/Src/main.c **** 		lcd_putstring(buff);
 214:Core/Src/main.c **** 		GPIOB->ODR = 1 << 2;  // Set LED2
 215:Core/Src/main.c **** 	}
 216:Core/Src/main.c **** }
 1347              		.loc 1 216 1 view .LVU357
 1348              		@ sp needed
 1349 0082 10BD     		pop	{r4, pc}
 1350              	.L72:
 184:Core/Src/main.c **** 		lcd_command(LINE_TWO);
 1351              		.loc 1 184 3 is_stmt 1 view .LVU358
 1352 0084 2B48     		ldr	r0, .L76+16
 1353 0086 FFF7FEFF 		bl	lcd_putstring
 1354              	.LVL55:
 185:Core/Src/main.c **** 		lcd_putstring("Press SW0...");
 1355              		.loc 1 185 3 view .LVU359
 1356 008a C020     		movs	r0, #192
 1357 008c FFF7FEFF 		bl	lcd_command
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 38


 1358              	.LVL56:
 186:Core/Src/main.c **** 		GPIOB->ODR = 1 << 3;  // LED 3 on
 1359              		.loc 1 186 3 view .LVU360
 1360 0090 2948     		ldr	r0, .L76+20
 1361 0092 FFF7FEFF 		bl	lcd_putstring
 1362              	.LVL57:
 187:Core/Src/main.c **** 	}
 1363              		.loc 1 187 3 view .LVU361
 187:Core/Src/main.c **** 	}
 1364              		.loc 1 187 14 is_stmt 0 view .LVU362
 1365 0096 294B     		ldr	r3, .L76+24
 1366 0098 0822     		movs	r2, #8
 1367 009a 5A61     		str	r2, [r3, #20]
 1368 009c C1E7     		b	.L68
 1369              	.L73:
 192:Core/Src/main.c **** 		lcd_command(LINE_TWO);
 1370              		.loc 1 192 3 is_stmt 1 view .LVU363
 1371 009e 2848     		ldr	r0, .L76+28
 1372 00a0 FFF7FEFF 		bl	lcd_putstring
 1373              	.LVL58:
 193:Core/Src/main.c **** 		convert2BCDASCII(minutes, seconds, hundredths, buff);
 1374              		.loc 1 193 3 view .LVU364
 1375 00a4 C020     		movs	r0, #192
 1376 00a6 FFF7FEFF 		bl	lcd_command
 1377              	.LVL59:
 194:Core/Src/main.c **** 		lcd_putstring(buff);
 1378              		.loc 1 194 3 view .LVU365
 1379 00aa 264C     		ldr	r4, .L76+32
 1380 00ac 264B     		ldr	r3, .L76+36
 1381 00ae 1A78     		ldrb	r2, [r3]
 1382 00b0 264B     		ldr	r3, .L76+40
 1383 00b2 1978     		ldrb	r1, [r3]
 1384 00b4 264B     		ldr	r3, .L76+44
 1385 00b6 1878     		ldrb	r0, [r3]
 1386 00b8 2300     		movs	r3, r4
 1387 00ba FFF7FEFF 		bl	convert2BCDASCII
 1388              	.LVL60:
 195:Core/Src/main.c **** 		GPIOB->ODR = 1 << 0;  // Set LED0
 1389              		.loc 1 195 3 view .LVU366
 1390 00be 2000     		movs	r0, r4
 1391 00c0 FFF7FEFF 		bl	lcd_putstring
 1392              	.LVL61:
 196:Core/Src/main.c **** 	}
 1393              		.loc 1 196 3 view .LVU367
 196:Core/Src/main.c **** 	}
 1394              		.loc 1 196 14 is_stmt 0 view .LVU368
 1395 00c4 1D4B     		ldr	r3, .L76+24
 1396 00c6 0122     		movs	r2, #1
 1397 00c8 5A61     		str	r2, [r3, #20]
 1398 00ca BAE7     		b	.L69
 1399              	.L74:
 201:Core/Src/main.c **** 		lcd_command(LINE_TWO);
 1400              		.loc 1 201 3 is_stmt 1 view .LVU369
 1401 00cc 1C48     		ldr	r0, .L76+28
 1402 00ce FFF7FEFF 		bl	lcd_putstring
 1403              	.LVL62:
 202:Core/Src/main.c **** 		convert2BCDASCII(lapped_time.minutes, lapped_time.seconds, lapped_time.hundredths, buff);  // Dis
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 39


 1404              		.loc 1 202 3 view .LVU370
 1405 00d2 C020     		movs	r0, #192
 1406 00d4 FFF7FEFF 		bl	lcd_command
 1407              	.LVL63:
 203:Core/Src/main.c **** 		lcd_putstring(buff);
 1408              		.loc 1 203 3 view .LVU371
 1409 00d8 1A4C     		ldr	r4, .L76+32
 1410 00da 1E4B     		ldr	r3, .L76+48
 1411 00dc 9A78     		ldrb	r2, [r3, #2]
 1412 00de 5978     		ldrb	r1, [r3, #1]
 1413 00e0 1878     		ldrb	r0, [r3]
 1414 00e2 2300     		movs	r3, r4
 1415 00e4 FFF7FEFF 		bl	convert2BCDASCII
 1416              	.LVL64:
 204:Core/Src/main.c **** 		GPIOB->ODR = 1 << 1;  // Set LED1
 1417              		.loc 1 204 3 view .LVU372
 1418 00e8 2000     		movs	r0, r4
 1419 00ea FFF7FEFF 		bl	lcd_putstring
 1420              	.LVL65:
 205:Core/Src/main.c **** 	}
 1421              		.loc 1 205 3 view .LVU373
 205:Core/Src/main.c **** 	}
 1422              		.loc 1 205 14 is_stmt 0 view .LVU374
 1423 00ee 134B     		ldr	r3, .L76+24
 1424 00f0 0222     		movs	r2, #2
 1425 00f2 5A61     		str	r2, [r3, #20]
 1426 00f4 B5E7     		b	.L70
 1427              	.L75:
 210:Core/Src/main.c **** 		lcd_command(LINE_TWO);
 1428              		.loc 1 210 3 is_stmt 1 view .LVU375
 1429 00f6 1248     		ldr	r0, .L76+28
 1430 00f8 FFF7FEFF 		bl	lcd_putstring
 1431              	.LVL66:
 211:Core/Src/main.c **** 		convert2BCDASCII(minutes, seconds, hundredths, buff);
 1432              		.loc 1 211 3 view .LVU376
 1433 00fc C020     		movs	r0, #192
 1434 00fe FFF7FEFF 		bl	lcd_command
 1435              	.LVL67:
 212:Core/Src/main.c **** 		lcd_putstring(buff);
 1436              		.loc 1 212 3 view .LVU377
 1437 0102 104C     		ldr	r4, .L76+32
 1438 0104 104B     		ldr	r3, .L76+36
 1439 0106 1A78     		ldrb	r2, [r3]
 1440 0108 104B     		ldr	r3, .L76+40
 1441 010a 1978     		ldrb	r1, [r3]
 1442 010c 104B     		ldr	r3, .L76+44
 1443 010e 1878     		ldrb	r0, [r3]
 1444 0110 2300     		movs	r3, r4
 1445 0112 FFF7FEFF 		bl	convert2BCDASCII
 1446              	.LVL68:
 213:Core/Src/main.c **** 		GPIOB->ODR = 1 << 2;  // Set LED2
 1447              		.loc 1 213 3 view .LVU378
 1448 0116 2000     		movs	r0, r4
 1449 0118 FFF7FEFF 		bl	lcd_putstring
 1450              	.LVL69:
 214:Core/Src/main.c **** 	}
 1451              		.loc 1 214 3 view .LVU379
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 40


 214:Core/Src/main.c **** 	}
 1452              		.loc 1 214 14 is_stmt 0 view .LVU380
 1453 011c 074B     		ldr	r3, .L76+24
 1454 011e 0422     		movs	r2, #4
 1455 0120 5A61     		str	r2, [r3, #20]
 1456              		.loc 1 216 1 view .LVU381
 1457 0122 AEE7     		b	.L67
 1458              	.L77:
 1459              		.align	2
 1460              	.L76:
 1461 0124 00000000 		.word	startFlag
 1462 0128 00000000 		.word	lapFlag
 1463 012c 00000000 		.word	stopFlag
 1464 0130 00000000 		.word	resetFlag
 1465 0134 00000000 		.word	.LC7
 1466 0138 0C000000 		.word	.LC9
 1467 013c 00040048 		.word	1207960576
 1468 0140 1C000000 		.word	.LC11
 1469 0144 00000000 		.word	buff
 1470 0148 00000000 		.word	hundredths
 1471 014c 00000000 		.word	seconds
 1472 0150 00000000 		.word	minutes
 1473 0154 00000000 		.word	lapped_time
 1474              		.cfi_endproc
 1475              	.LFE54:
 1477              		.section	.text.checkPB,"ax",%progbits
 1478              		.align	1
 1479              		.global	checkPB
 1480              		.syntax unified
 1481              		.code	16
 1482              		.thumb_func
 1484              	checkPB:
 1485              	.LFB55:
 217:Core/Src/main.c **** 
 218:Core/Src/main.c **** void checkPB(void) {
 1486              		.loc 1 218 20 is_stmt 1 view -0
 1487              		.cfi_startproc
 1488              		@ args = 0, pretend = 0, frame = 0
 1489              		@ frame_needed = 0, uses_anonymous_args = 0
 1490              		@ link register save eliminated.
 219:Core/Src/main.c **** 	uint16_t button_pressed = GPIOA->IDR;
 1491              		.loc 1 219 2 view .LVU383
 1492              		.loc 1 219 33 is_stmt 0 view .LVU384
 1493 0000 9023     		movs	r3, #144
 1494 0002 DB05     		lsls	r3, r3, #23
 1495 0004 1B69     		ldr	r3, [r3, #16]
 1496              	.LVL70:
 220:Core/Src/main.c **** 
 221:Core/Src/main.c **** 	// Switch 0 pressed
 222:Core/Src/main.c **** 	if (!(button_pressed & GPIO_IDR_0)) {
 1497              		.loc 1 222 2 is_stmt 1 view .LVU385
 1498              		.loc 1 222 5 is_stmt 0 view .LVU386
 1499 0006 DA07     		lsls	r2, r3, #31
 1500 0008 13D4     		bmi	.L79
 223:Core/Src/main.c **** 		startFlag = TRUE;
 1501              		.loc 1 223 3 is_stmt 1 view .LVU387
 1502              		.loc 1 223 13 is_stmt 0 view .LVU388
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 41


 1503 000a 304A     		ldr	r2, .L87
 1504 000c 0121     		movs	r1, #1
 1505 000e 1170     		strb	r1, [r2]
 224:Core/Src/main.c **** 		lapFlag = FALSE;
 1506              		.loc 1 224 3 is_stmt 1 view .LVU389
 1507              		.loc 1 224 11 is_stmt 0 view .LVU390
 1508 0010 2F49     		ldr	r1, .L87+4
 1509 0012 0022     		movs	r2, #0
 1510 0014 0A70     		strb	r2, [r1]
 225:Core/Src/main.c **** 		stopFlag = FALSE;
 1511              		.loc 1 225 3 is_stmt 1 view .LVU391
 1512              		.loc 1 225 12 is_stmt 0 view .LVU392
 1513 0016 2F49     		ldr	r1, .L87+8
 1514 0018 0A70     		strb	r2, [r1]
 226:Core/Src/main.c **** 		resetFlag = FALSE;
 1515              		.loc 1 226 3 is_stmt 1 view .LVU393
 1516              		.loc 1 226 13 is_stmt 0 view .LVU394
 1517 001a 2F49     		ldr	r1, .L87+12
 1518 001c 0A70     		strb	r2, [r1]
 227:Core/Src/main.c **** 		GPIOA->ODR |= GPIO_ODR_7;
 1519              		.loc 1 227 3 is_stmt 1 view .LVU395
 1520              		.loc 1 227 8 is_stmt 0 view .LVU396
 1521 001e 9021     		movs	r1, #144
 1522 0020 C905     		lsls	r1, r1, #23
 1523 0022 4A69     		ldr	r2, [r1, #20]
 1524              		.loc 1 227 14 view .LVU397
 1525 0024 8020     		movs	r0, #128
 1526 0026 0243     		orrs	r2, r0
 1527 0028 4A61     		str	r2, [r1, #20]
 228:Core/Src/main.c **** 
 229:Core/Src/main.c **** 		NVIC_EnableIRQ(TIM14_IRQn);
 1528              		.loc 1 229 3 is_stmt 1 view .LVU398
 1529              	.LVL71:
 1530              	.LBB20:
 1531              	.LBI20:
 1532              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 42


  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 43


  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 44


 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 45


 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 46


 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 47


 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 48


 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 49


 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 50


 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 51


 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 52


 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 1533              		.loc 3 623 22 view .LVU399
 1534              	.LBB21:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1535              		.loc 3 625 3 view .LVU400
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1536              		.loc 3 627 5 view .LVU401
 1537              		.loc 3 627 20 is_stmt 0 view .LVU402
 1538 002a 2C4A     		ldr	r2, .L87+16
 1539 002c 8021     		movs	r1, #128
 1540 002e 0903     		lsls	r1, r1, #12
 1541 0030 1160     		str	r1, [r2]
 1542              	.LVL72:
 1543              	.L79:
 1544              		.loc 3 627 20 view .LVU403
 1545              	.LBE21:
 1546              	.LBE20:
 230:Core/Src/main.c **** 	}
 231:Core/Src/main.c **** 
 232:Core/Src/main.c **** 	// Switch 1 pressed
 233:Core/Src/main.c **** 	if (!(button_pressed & GPIO_IDR_1)) {
 1547              		.loc 1 233 2 is_stmt 1 view .LVU404
 1548              		.loc 1 233 5 is_stmt 0 view .LVU405
 1549 0032 9A07     		lsls	r2, r3, #30
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 53


 1550 0034 19D4     		bmi	.L80
 234:Core/Src/main.c **** 		startFlag = TRUE;
 1551              		.loc 1 234 3 is_stmt 1 view .LVU406
 1552              		.loc 1 234 13 is_stmt 0 view .LVU407
 1553 0036 254A     		ldr	r2, .L87
 1554 0038 0121     		movs	r1, #1
 1555 003a 1170     		strb	r1, [r2]
 235:Core/Src/main.c **** 		lapFlag = TRUE;
 1556              		.loc 1 235 3 is_stmt 1 view .LVU408
 1557              		.loc 1 235 11 is_stmt 0 view .LVU409
 1558 003c 244A     		ldr	r2, .L87+4
 1559 003e 1170     		strb	r1, [r2]
 236:Core/Src/main.c **** 		stopFlag = FALSE;
 1560              		.loc 1 236 3 is_stmt 1 view .LVU410
 1561              		.loc 1 236 12 is_stmt 0 view .LVU411
 1562 0040 244A     		ldr	r2, .L87+8
 1563 0042 0021     		movs	r1, #0
 1564 0044 1170     		strb	r1, [r2]
 237:Core/Src/main.c **** 		resetFlag = FALSE;
 1565              		.loc 1 237 3 is_stmt 1 view .LVU412
 1566              		.loc 1 237 13 is_stmt 0 view .LVU413
 1567 0046 244A     		ldr	r2, .L87+12
 1568 0048 1170     		strb	r1, [r2]
 238:Core/Src/main.c **** 
 239:Core/Src/main.c **** 		// Store lapped time
 240:Core/Src/main.c **** 		lapped_time.minutes = minutes;
 1569              		.loc 1 240 3 is_stmt 1 view .LVU414
 1570              		.loc 1 240 23 is_stmt 0 view .LVU415
 1571 004a 254A     		ldr	r2, .L87+20
 1572 004c 2549     		ldr	r1, .L87+24
 1573 004e 0978     		ldrb	r1, [r1]
 1574 0050 1170     		strb	r1, [r2]
 241:Core/Src/main.c **** 		lapped_time.seconds = seconds;
 1575              		.loc 1 241 3 is_stmt 1 view .LVU416
 1576              		.loc 1 241 23 is_stmt 0 view .LVU417
 1577 0052 2549     		ldr	r1, .L87+28
 1578 0054 0978     		ldrb	r1, [r1]
 1579 0056 5170     		strb	r1, [r2, #1]
 242:Core/Src/main.c **** 		lapped_time.hundredths = hundredths;
 1580              		.loc 1 242 3 is_stmt 1 view .LVU418
 1581              		.loc 1 242 26 is_stmt 0 view .LVU419
 1582 0058 2449     		ldr	r1, .L87+32
 1583 005a 0978     		ldrb	r1, [r1]
 1584 005c 9170     		strb	r1, [r2, #2]
 243:Core/Src/main.c **** 
 244:Core/Src/main.c **** 		GPIOA->ODR &= ~GPIO_ODR_7;
 1585              		.loc 1 244 3 is_stmt 1 view .LVU420
 1586              		.loc 1 244 8 is_stmt 0 view .LVU421
 1587 005e 9021     		movs	r1, #144
 1588 0060 C905     		lsls	r1, r1, #23
 1589 0062 4A69     		ldr	r2, [r1, #20]
 1590              		.loc 1 244 14 view .LVU422
 1591 0064 8020     		movs	r0, #128
 1592 0066 8243     		bics	r2, r0
 1593 0068 4A61     		str	r2, [r1, #20]
 1594              	.L80:
 245:Core/Src/main.c **** 	}
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 54


 246:Core/Src/main.c **** 
 247:Core/Src/main.c **** 	// Switch 2 pressed
 248:Core/Src/main.c **** 	if (!(button_pressed & GPIO_IDR_2)) {
 1595              		.loc 1 248 2 is_stmt 1 view .LVU423
 1596              		.loc 1 248 5 is_stmt 0 view .LVU424
 1597 006a 5A07     		lsls	r2, r3, #29
 1598 006c 12D4     		bmi	.L81
 249:Core/Src/main.c **** 		startFlag = TRUE;
 1599              		.loc 1 249 3 is_stmt 1 view .LVU425
 1600              		.loc 1 249 13 is_stmt 0 view .LVU426
 1601 006e 174A     		ldr	r2, .L87
 1602 0070 0120     		movs	r0, #1
 1603 0072 1070     		strb	r0, [r2]
 250:Core/Src/main.c **** 		lapFlag = FALSE;
 1604              		.loc 1 250 3 is_stmt 1 view .LVU427
 1605              		.loc 1 250 11 is_stmt 0 view .LVU428
 1606 0074 164A     		ldr	r2, .L87+4
 1607 0076 0021     		movs	r1, #0
 1608 0078 1170     		strb	r1, [r2]
 251:Core/Src/main.c **** 		stopFlag = TRUE;
 1609              		.loc 1 251 3 is_stmt 1 view .LVU429
 1610              		.loc 1 251 12 is_stmt 0 view .LVU430
 1611 007a 164A     		ldr	r2, .L87+8
 1612 007c 1070     		strb	r0, [r2]
 252:Core/Src/main.c **** 		resetFlag = FALSE;
 1613              		.loc 1 252 3 is_stmt 1 view .LVU431
 1614              		.loc 1 252 13 is_stmt 0 view .LVU432
 1615 007e 164A     		ldr	r2, .L87+12
 1616 0080 1170     		strb	r1, [r2]
 253:Core/Src/main.c **** 
 254:Core/Src/main.c **** 		NVIC_DisableIRQ(TIM14_IRQn);  // Disable the counter
 1617              		.loc 1 254 3 is_stmt 1 view .LVU433
 1618              	.LVL73:
 1619              	.LBB22:
 1620              	.LBI22:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 55


 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 1621              		.loc 3 659 22 view .LVU434
 1622              	.LBB23:
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 1623              		.loc 3 661 3 view .LVU435
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 1624              		.loc 3 663 5 view .LVU436
 1625              		.loc 3 663 20 is_stmt 0 view .LVU437
 1626 0082 1649     		ldr	r1, .L87+16
 1627 0084 8022     		movs	r2, #128
 1628 0086 8020     		movs	r0, #128
 1629 0088 0003     		lsls	r0, r0, #12
 1630 008a 8850     		str	r0, [r1, r2]
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 1631              		.loc 3 664 5 is_stmt 1 view .LVU438
 1632              	.LBB24:
 1633              	.LBI24:
 1634              		.file 4 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 56


  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 57


  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 58


 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 59


 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 60


 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 61


 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 62


 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 63


 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 64


 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 65


 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 66


 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 67


 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 68


 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 69


 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 70


 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 1635              		.loc 4 877 27 view .LVU439
 1636              	.LBB25:
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 1637              		.loc 4 879 3 view .LVU440
 1638              		.syntax divided
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 71


 1639              	@ 879 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1640 008c BFF34F8F 		dsb 0xF
 1641              	@ 0 "" 2
 1642              		.thumb
 1643              		.syntax unified
 1644              	.LBE25:
 1645              	.LBE24:
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 1646              		.loc 3 665 5 view .LVU441
 1647              	.LBB26:
 1648              	.LBI26:
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1649              		.loc 4 866 27 view .LVU442
 1650              	.LBB27:
 868:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1651              		.loc 4 868 3 view .LVU443
 1652              		.syntax divided
 1653              	@ 868 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1654 0090 BFF36F8F 		isb 0xF
 1655              	@ 0 "" 2
 1656              	.LVL74:
 1657              		.thumb
 1658              		.syntax unified
 1659              	.L81:
 868:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1660              		.loc 4 868 3 is_stmt 0 view .LVU444
 1661              	.LBE27:
 1662              	.LBE26:
 1663              	.LBE23:
 1664              	.LBE22:
 255:Core/Src/main.c **** 	}
 256:Core/Src/main.c **** 
 257:Core/Src/main.c **** 	// Switch 3 pressed
 258:Core/Src/main.c **** 	if (!(button_pressed & GPIO_IDR_3)) {
 1665              		.loc 1 258 2 is_stmt 1 view .LVU445
 1666              		.loc 1 258 5 is_stmt 0 view .LVU446
 1667 0094 1B07     		lsls	r3, r3, #28
 1668 0096 18D4     		bmi	.L78
 1669              	.LVL75:
 259:Core/Src/main.c **** 		startFlag = FALSE;
 1670              		.loc 1 259 3 is_stmt 1 view .LVU447
 1671              		.loc 1 259 13 is_stmt 0 view .LVU448
 1672 0098 0C4A     		ldr	r2, .L87
 1673 009a 0023     		movs	r3, #0
 1674 009c 1370     		strb	r3, [r2]
 260:Core/Src/main.c **** 		lapFlag = FALSE;
 1675              		.loc 1 260 3 is_stmt 1 view .LVU449
 1676              		.loc 1 260 11 is_stmt 0 view .LVU450
 1677 009e 0C4A     		ldr	r2, .L87+4
 1678 00a0 1370     		strb	r3, [r2]
 261:Core/Src/main.c **** 		stopFlag = FALSE;
 1679              		.loc 1 261 3 is_stmt 1 view .LVU451
 1680              		.loc 1 261 12 is_stmt 0 view .LVU452
 1681 00a2 0C4A     		ldr	r2, .L87+8
 1682 00a4 1370     		strb	r3, [r2]
 262:Core/Src/main.c **** 		resetFlag = TRUE;
 1683              		.loc 1 262 3 is_stmt 1 view .LVU453
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 72


 1684              		.loc 1 262 13 is_stmt 0 view .LVU454
 1685 00a6 0C4A     		ldr	r2, .L87+12
 1686 00a8 0121     		movs	r1, #1
 1687 00aa 1170     		strb	r1, [r2]
 263:Core/Src/main.c **** 
 264:Core/Src/main.c **** 		NVIC_DisableIRQ(TIM14_IRQn);  // Disable the counter
 1688              		.loc 1 264 3 is_stmt 1 view .LVU455
 1689              	.LVL76:
 1690              	.LBB28:
 1691              	.LBI28:
 659:Drivers/CMSIS/Include/core_cm0.h **** {
 1692              		.loc 3 659 22 view .LVU456
 1693              	.LBB29:
 661:Drivers/CMSIS/Include/core_cm0.h ****   {
 1694              		.loc 3 661 3 view .LVU457
 663:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 1695              		.loc 3 663 5 view .LVU458
 663:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 1696              		.loc 3 663 20 is_stmt 0 view .LVU459
 1697 00ac 0B49     		ldr	r1, .L87+16
 1698 00ae 8022     		movs	r2, #128
 1699 00b0 8020     		movs	r0, #128
 1700 00b2 0003     		lsls	r0, r0, #12
 1701 00b4 8850     		str	r0, [r1, r2]
 664:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 1702              		.loc 3 664 5 is_stmt 1 view .LVU460
 1703              	.LBB30:
 1704              	.LBI30:
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1705              		.loc 4 877 27 view .LVU461
 1706              	.LBB31:
 1707              		.loc 4 879 3 view .LVU462
 1708              		.syntax divided
 1709              	@ 879 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1710 00b6 BFF34F8F 		dsb 0xF
 1711              	@ 0 "" 2
 1712              		.thumb
 1713              		.syntax unified
 1714              	.LBE31:
 1715              	.LBE30:
 1716              		.loc 3 665 5 view .LVU463
 1717              	.LBB32:
 1718              	.LBI32:
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1719              		.loc 4 866 27 view .LVU464
 1720              	.LBB33:
 868:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1721              		.loc 4 868 3 view .LVU465
 1722              		.syntax divided
 1723              	@ 868 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1724 00ba BFF36F8F 		isb 0xF
 1725              	@ 0 "" 2
 1726              	.LVL77:
 868:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1727              		.loc 4 868 3 is_stmt 0 view .LVU466
 1728              		.thumb
 1729              		.syntax unified
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 73


 1730              	.LBE33:
 1731              	.LBE32:
 1732              	.LBE29:
 1733              	.LBE28:
 265:Core/Src/main.c **** 
 266:Core/Src/main.c **** 		// Reset the time
 267:Core/Src/main.c **** 		minutes = 0;
 1734              		.loc 1 267 3 is_stmt 1 view .LVU467
 1735              		.loc 1 267 11 is_stmt 0 view .LVU468
 1736 00be 094A     		ldr	r2, .L87+24
 1737 00c0 1370     		strb	r3, [r2]
 268:Core/Src/main.c **** 		seconds = 0;
 1738              		.loc 1 268 3 is_stmt 1 view .LVU469
 1739              		.loc 1 268 11 is_stmt 0 view .LVU470
 1740 00c2 094A     		ldr	r2, .L87+28
 1741 00c4 1370     		strb	r3, [r2]
 269:Core/Src/main.c **** 		hundredths = 0;
 1742              		.loc 1 269 3 is_stmt 1 view .LVU471
 1743              		.loc 1 269 14 is_stmt 0 view .LVU472
 1744 00c6 094A     		ldr	r2, .L87+32
 1745 00c8 1370     		strb	r3, [r2]
 1746              	.L78:
 270:Core/Src/main.c **** 	}
 271:Core/Src/main.c **** }
 1747              		.loc 1 271 1 view .LVU473
 1748              		@ sp needed
 1749 00ca 7047     		bx	lr
 1750              	.L88:
 1751              		.align	2
 1752              	.L87:
 1753 00cc 00000000 		.word	startFlag
 1754 00d0 00000000 		.word	lapFlag
 1755 00d4 00000000 		.word	stopFlag
 1756 00d8 00000000 		.word	resetFlag
 1757 00dc 00E100E0 		.word	-536813312
 1758 00e0 00000000 		.word	lapped_time
 1759 00e4 00000000 		.word	minutes
 1760 00e8 00000000 		.word	seconds
 1761 00ec 00000000 		.word	hundredths
 1762              		.cfi_endproc
 1763              	.LFE55:
 1765              		.section	.text.main,"ax",%progbits
 1766              		.align	1
 1767              		.global	main
 1768              		.syntax unified
 1769              		.code	16
 1770              		.thumb_func
 1772              	main:
 1773              	.LFB49:
  91:Core/Src/main.c **** 	initGPIO();	  // Initialise the GPIO pins
 1774              		.loc 1 91 16 is_stmt 1 view -0
 1775              		.cfi_startproc
 1776              		@ Volatile: function does not return.
 1777              		@ args = 0, pretend = 0, frame = 0
 1778              		@ frame_needed = 0, uses_anonymous_args = 0
 1779 0000 10B5     		push	{r4, lr}
 1780              		.cfi_def_cfa_offset 8
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 74


 1781              		.cfi_offset 4, -8
 1782              		.cfi_offset 14, -4
  92:Core/Src/main.c **** 	initTIM14();  // Initialise the timer
 1783              		.loc 1 92 2 view .LVU475
 1784 0002 FFF7FEFF 		bl	initGPIO
 1785              	.LVL78:
  93:Core/Src/main.c **** 	init_LCD();	  // Initialise the LCD
 1786              		.loc 1 93 2 view .LVU476
 1787 0006 FFF7FEFF 		bl	initTIM14
 1788              	.LVL79:
  94:Core/Src/main.c **** 	while (1) {
 1789              		.loc 1 94 2 view .LVU477
 1790 000a FFF7FEFF 		bl	init_LCD
 1791              	.LVL80:
 1792              	.L90:
  95:Core/Src/main.c **** 		checkPB();			 // Check the previous button press
 1793              		.loc 1 95 2 discriminator 1 view .LVU478
  96:Core/Src/main.c **** 		lcd_command(CLEAR);	 // clear previous display
 1794              		.loc 1 96 3 discriminator 1 view .LVU479
 1795 000e FFF7FEFF 		bl	checkPB
 1796              	.LVL81:
  97:Core/Src/main.c **** 		// char val[4];
 1797              		.loc 1 97 3 discriminator 1 view .LVU480
 1798 0012 0120     		movs	r0, #1
 1799 0014 FFF7FEFF 		bl	lcd_command
 1800              	.LVL82:
 101:Core/Src/main.c **** 		// lcd_putstring(buff);
 1801              		.loc 1 101 3 discriminator 1 view .LVU481
 1802 0018 FFF7FEFF 		bl	display
 1803              	.LVL83:
 103:Core/Src/main.c **** 	}
 1804              		.loc 1 103 3 discriminator 1 view .LVU482
 1805 001c 0148     		ldr	r0, .L91
 1806 001e FFF7FEFF 		bl	delay
 1807              	.LVL84:
  95:Core/Src/main.c **** 		checkPB();			 // Check the previous button press
 1808              		.loc 1 95 8 discriminator 1 view .LVU483
 1809 0022 F4E7     		b	.L90
 1810              	.L92:
 1811              		.align	2
 1812              	.L91:
 1813 0024 10270000 		.word	10000
 1814              		.cfi_endproc
 1815              	.LFE49:
 1817              		.global	lapped_time
 1818              		.section	.bss.lapped_time,"aw",%nobits
 1819              		.align	2
 1822              	lapped_time:
 1823 0000 000000   		.space	3
 1824              		.global	hundredths
 1825              		.section	.bss.hundredths,"aw",%nobits
 1828              	hundredths:
 1829 0000 00       		.space	1
 1830              		.global	seconds
 1831              		.section	.bss.seconds,"aw",%nobits
 1834              	seconds:
 1835 0000 00       		.space	1
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 75


 1836              		.global	minutes
 1837              		.section	.bss.minutes,"aw",%nobits
 1840              	minutes:
 1841 0000 00       		.space	1
 1842              		.global	resetFlag
 1843              		.section	.data.resetFlag,"aw"
 1846              	resetFlag:
 1847 0000 01       		.byte	1
 1848              		.global	stopFlag
 1849              		.section	.bss.stopFlag,"aw",%nobits
 1852              	stopFlag:
 1853 0000 00       		.space	1
 1854              		.global	lapFlag
 1855              		.section	.bss.lapFlag,"aw",%nobits
 1858              	lapFlag:
 1859 0000 00       		.space	1
 1860              		.global	startFlag
 1861              		.section	.bss.startFlag,"aw",%nobits
 1864              	startFlag:
 1865 0000 00       		.space	1
 1866              		.global	buff
 1867              		.section	.bss.buff,"aw",%nobits
 1868              		.align	2
 1871              	buff:
 1872 0000 00000000 		.space	16
 1872      00000000 
 1872      00000000 
 1872      00000000 
 1873              		.text
 1874              	.Letext0:
 1875              		.file 5 "/Users/sizweletanta/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vsc
 1876              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f051x8.h"
 1877              		.file 7 "/Users/sizweletanta/Library/Application Support/Code/User/globalStorage/bmd.stm32-for-vsc
ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 76


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:19     .text.delay:0000000000000000 $t
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:25     .text.delay:0000000000000000 delay
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:78     .text.pulse_strobe:0000000000000000 $t
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:84     .text.pulse_strobe:0000000000000000 pulse_strobe
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:137    .text.pulse_strobe:0000000000000034 $d
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:142    .text.lcd_putchar:0000000000000000 $t
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:148    .text.lcd_putchar:0000000000000000 lcd_putchar
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:394    .text.lcd_putchar:000000000000011c $d
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:400    .text.lcd_putstring:0000000000000000 $t
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:406    .text.lcd_putstring:0000000000000000 lcd_putstring
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:457    .text.lcd_command:0000000000000000 $t
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:463    .text.lcd_command:0000000000000000 lcd_command
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:713    .text.lcd_command:0000000000000124 $d
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:720    .text.init_LCD:0000000000000000 $t
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:726    .text.init_LCD:0000000000000000 init_LCD
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:819    .text.init_LCD:0000000000000070 $d
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:827    .text.initTIM14:0000000000000000 $t
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:833    .text.initTIM14:0000000000000000 initTIM14
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:886    .text.initTIM14:0000000000000030 $d
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:893    .text.initGPIO:0000000000000000 $t
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:899    .text.initGPIO:0000000000000000 initGPIO
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:981    .text.initGPIO:0000000000000054 $d
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:987    .text.TIM14_IRQHandler:0000000000000000 $t
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:993    .text.TIM14_IRQHandler:0000000000000000 TIM14_IRQHandler
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1059   .text.TIM14_IRQHandler:0000000000000044 $d
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1828   .bss.hundredths:0000000000000000 hundredths
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1834   .bss.seconds:0000000000000000 seconds
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1840   .bss.minutes:0000000000000000 minutes
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1069   .text.convert2BCDASCII:0000000000000000 $t
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1075   .text.convert2BCDASCII:0000000000000000 convert2BCDASCII
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1220   .rodata.display.str1.4:0000000000000000 $d
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1230   .text.display:0000000000000000 $t
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1236   .text.display:0000000000000000 display
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1461   .text.display:0000000000000124 $d
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1864   .bss.startFlag:0000000000000000 startFlag
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1858   .bss.lapFlag:0000000000000000 lapFlag
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1852   .bss.stopFlag:0000000000000000 stopFlag
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1846   .data.resetFlag:0000000000000000 resetFlag
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1871   .bss.buff:0000000000000000 buff
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1822   .bss.lapped_time:0000000000000000 lapped_time
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1478   .text.checkPB:0000000000000000 $t
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1484   .text.checkPB:0000000000000000 checkPB
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1753   .text.checkPB:00000000000000cc $d
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1766   .text.main:0000000000000000 $t
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1772   .text.main:0000000000000000 main
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1813   .text.main:0000000000000024 $d
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1819   .bss.lapped_time:0000000000000000 $d
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1829   .bss.hundredths:0000000000000000 $d
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1835   .bss.seconds:0000000000000000 $d
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1841   .bss.minutes:0000000000000000 $d
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1853   .bss.stopFlag:0000000000000000 $d
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1859   .bss.lapFlag:0000000000000000 $d
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1865   .bss.startFlag:0000000000000000 $d
/var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s:1868   .bss.buff:0000000000000000 $d

ARM GAS  /var/folders/zf/mkqpy7tx7p1_khjt1h6hykn40000gn/T//cctK8kqD.s 			page 77


UNDEFINED SYMBOLS
__aeabi_uidiv
__aeabi_uidivmod
